// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var LonaValue$LonaCompilerCore = require("../core/lonaValue.bs.js");
var JavaScriptRender$LonaCompilerCore = require("../javaScript/javaScriptRender.bs.js");

function makeRule(key, level, xs) {
  return /* Property */Block.__(21, [{
              key: /* StringLiteral */Block.__(2, [key]),
              value: /* ArrayLiteral */Block.__(19, [/* :: */[
                    /* StringLiteral */Block.__(2, [level]),
                    /* :: */[
                      xs,
                      /* [] */0
                    ]
                  ]])
            }]);
}

function maybeMap(fn, param) {
  if (param) {
    return /* Some */[Curry._1(fn, param[0])];
  } else {
    return /* None */0;
  }
}

function optToStringLiteral(param) {
  if (param) {
    return /* StringLiteral */Block.__(2, [param[0]]);
  } else {
    return /* Empty */0;
  }
}

function makeColorRules(colors) {
  var grabHex = function (color) {
    return /* Property */Block.__(21, [{
                key: /* Identifier */Block.__(3, [/* :: */[
                      color[/* name */1],
                      /* [] */0
                    ]]),
                value: /* Literal */Block.__(1, [LonaValue$LonaCompilerCore.string(color[/* value */2])])
              }]);
  };
  return makeRule("colorPalette", "Error", /* ObjectLiteral */Block.__(20, [List.map(grabHex, colors)]));
}

function makeFontSizes(textStyles) {
  var grabSizes = function (text) {
    return maybeMap((function (prim) {
                  return prim | 0;
                }), text[/* fontSize */5]);
  };
  return makeRule("fontSize", "Error", /* ArrayLiteral */Block.__(19, [List.map(optToStringLiteral, List.map((function (param) {
                            return maybeMap((function (prim) {
                                          return String(prim);
                                        }), param);
                          }), List.sort_uniq(Caml_obj.caml_compare, List.map(grabSizes, textStyles))))]));
}

function makeFontFamilies(textStyles) {
  return makeRule("fontFamily", "Error", /* ArrayLiteral */Block.__(19, [List.map(optToStringLiteral, List.sort_uniq(Caml_obj.caml_compare, List.map((function (t) {
                                return t[/* fontFamily */3];
                              }), textStyles)))]));
}

function render(colors, textStyles) {
  return JavaScriptRender$LonaCompilerCore.toString(/* Program */Block.__(24, [/* :: */[
                  /* ObjectLiteral */Block.__(20, [/* :: */[
                        /* Property */Block.__(21, [{
                              key: /* Identifier */Block.__(3, [/* :: */[
                                    "rules",
                                    /* [] */0
                                  ]]),
                              value: /* ObjectLiteral */Block.__(20, [/* :: */[
                                    makeColorRules(colors),
                                    /* :: */[
                                      makeFontSizes(textStyles),
                                      /* :: */[
                                        makeFontFamilies(textStyles),
                                        /* [] */0
                                      ]
                                    ]
                                  ]])
                            }]),
                        /* [] */0
                      ]]),
                  /* [] */0
                ]]));
}

exports.makeRule = makeRule;
exports.maybeMap = maybeMap;
exports.optToStringLiteral = optToStringLiteral;
exports.makeColorRules = makeColorRules;
exports.makeFontSizes = makeFontSizes;
exports.makeFontFamilies = makeFontFamilies;
exports.render = render;
/* JavaScriptRender-LonaCompilerCore Not a pure module */
