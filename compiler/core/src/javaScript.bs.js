// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                       = require("bs-platform/lib/js/list.js");
var Block                      = require("bs-platform/lib/js/block.js");
var Curry                      = require("bs-platform/lib/js/curry.js");
var Prettier                   = require("prettier");
var Json_decode                = require("bs-json/src/Json_decode.js");
var Layer$LonaCompilerCore     = require("./layer.bs.js");
var Logic$LonaCompilerCore     = require("./logic.bs.js");
var Decode$LonaCompilerCore    = require("./decode.bs.js");
var Render$LonaCompilerCore    = require("./render.bs.js");
var Prettier$LonaCompilerCore  = require("./prettier.bs.js");
var StringMap$LonaCompilerCore = require("./stringMap.bs.js");

function map(f, node) {
  if (typeof node === "number") {
    return Curry._1(f, node);
  } else {
    switch (node.tag | 0) {
      case 0 : 
          return Curry._1(f, /* Return */Block.__(0, [map(f, node[0])]));
      case 3 : 
          return Curry._1(f, /* Class */Block.__(3, [
                        node[0],
                        node[1],
                        List.map((function (param) {
                                return map(f, param);
                              }), node[2])
                      ]));
      case 4 : 
          return Curry._1(f, /* Method */Block.__(4, [
                        node[0],
                        node[1],
                        List.map((function (param) {
                                return map(f, param);
                              }), node[2])
                      ]));
      case 5 : 
          return Curry._1(f, /* CallExpression */Block.__(5, [
                        map(f, node[0]),
                        List.map((function (param) {
                                return map(f, param);
                              }), node[1])
                      ]));
      case 6 : 
          return Curry._1(f, /* JSXAttribute */Block.__(6, [
                        node[0],
                        map(f, node[1])
                      ]));
      case 7 : 
          return Curry._1(f, /* JSXElement */Block.__(7, [
                        node[0],
                        List.map((function (param) {
                                return map(f, param);
                              }), node[1]),
                        List.map((function (param) {
                                return map(f, param);
                              }), node[2])
                      ]));
      case 8 : 
          return Curry._1(f, /* VariableDeclaration */Block.__(8, [map(f, node[0])]));
      case 9 : 
          return Curry._1(f, /* AssignmentExpression */Block.__(9, [
                        map(f, node[0]),
                        map(f, node[1])
                      ]));
      case 10 : 
          return Curry._1(f, /* BooleanExpression */Block.__(10, [
                        map(f, node[0]),
                        node[1],
                        map(f, node[2])
                      ]));
      case 11 : 
          return Curry._1(f, /* ConditionalStatement */Block.__(11, [
                        map(f, node[0]),
                        List.map((function (param) {
                                return map(f, param);
                              }), node[1])
                      ]));
      case 12 : 
          return Curry._1(f, /* ArrayLiteral */Block.__(12, [List.map((function (param) {
                                return map(f, param);
                              }), node[0])]));
      case 13 : 
          return Curry._1(f, /* ObjectLiteral */Block.__(13, [List.map((function (param) {
                                return map(f, param);
                              }), node[0])]));
      case 14 : 
          return Curry._1(f, /* ObjectProperty */Block.__(14, [
                        map(f, node[0]),
                        map(f, node[1])
                      ]));
      case 15 : 
          return Curry._1(f, /* Block */Block.__(15, [List.map((function (param) {
                                return map(f, param);
                              }), node[0])]));
      case 16 : 
          return Curry._1(f, /* Program */Block.__(16, [List.map((function (param) {
                                return map(f, param);
                              }), node[0])]));
      default:
        return Curry._1(f, node);
    }
  }
}

function optimizeTruthyBooleanExpression(node) {
  var booleanValue = function (sub) {
    if (typeof sub === "number" || sub.tag !== 1) {
      return /* None */0;
    } else {
      return Json_decode.optional(Json_decode.bool, sub[0][/* data */1]);
    }
  };
  if (typeof node === "number") {
    return node;
  } else if (node.tag === 10) {
    var b = node[2];
    var a = node[0];
    var boolA = booleanValue(a);
    var boolB = booleanValue(b);
    var exit = 0;
    if (node[1] !== 0) {
      return node;
    } else if (boolB) {
      if (boolB[0] !== 0) {
        return a;
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (boolA && boolA[0] !== 0) {
        return b;
      } else {
        return node;
      }
    }
    
  } else {
    return node;
  }
}

function renameIdentifiers(node) {
  if (typeof node === "number") {
    return node;
  } else if (node.tag === 2) {
    var match = node[0];
    if (match) {
      var tail = match[1];
      switch (match[0]) {
        case "layers" : 
            if (tail) {
              return /* Identifier */Block.__(2, [/* :: */[
                          List.fold_left((function (a, b) {
                                  return a + ("$" + b);
                                }), tail[0], tail[1]),
                          /* [] */0
                        ]]);
            } else {
              return node;
            }
        case "parameters" : 
            return /* Identifier */Block.__(2, [/* :: */[
                        "this",
                        /* :: */[
                          "props",
                          tail
                        ]
                      ]]);
        default:
          return node;
      }
    } else {
      return node;
    }
  } else {
    return node;
  }
}

function optimize(node) {
  return map(optimizeTruthyBooleanExpression, node);
}

function prepareForRender(node) {
  return map(renameIdentifiers, node);
}

var Ast = /* module */[
  /* map */map,
  /* optimizeTruthyBooleanExpression */optimizeTruthyBooleanExpression,
  /* renameIdentifiers */renameIdentifiers,
  /* optimize */optimize,
  /* prepareForRender */prepareForRender
];

function renderBinaryOperator(x) {
  var tmp;
  switch (x) {
    case 0 : 
        tmp = "===";
        break;
    case 1 : 
        tmp = "!==";
        break;
    case 2 : 
        tmp = ">";
        break;
    case 3 : 
        tmp = ">=";
        break;
    case 4 : 
        tmp = "<";
        break;
    case 5 : 
        tmp = "<=";
        break;
    case 6 : 
        tmp = "+";
        break;
    case 7 : 
        tmp = "";
        break;
    
  }
  return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], tmp);
}

function render(ast) {
  if (typeof ast === "number") {
    return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "");
  } else {
    switch (ast.tag | 0) {
      case 0 : 
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "return"),
                                    /* :: */[
                                      Prettier.doc.builders.line,
                                      /* :: */[
                                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                                        /* [] */0
                                      ]
                                    ]
                                  ])),
                          /* :: */[
                            Prettier.doc.builders.indent(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                                      Prettier.doc.builders.line,
                                      /* :: */[
                                        render(ast[0]),
                                        /* [] */0
                                      ]
                                    ])),
                            /* :: */[
                              Prettier.doc.builders.line,
                              /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ");"),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]));
      case 1 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], JSON.stringify(ast[0][/* data */1]));
      case 2 : 
          return Prettier.doc.builders.group(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                              Prettier.doc.builders.softline,
                              /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "."),
                                /* [] */0
                              ]
                            ]), List.map(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ast[0])));
      case 3 : 
          var $$extends = ast[1];
          var name = ast[0];
          var decl = $$extends ? /* :: */[
              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "class"),
              /* :: */[
                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], name),
                /* :: */[
                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "extends"),
                  /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], $$extends[0]),
                    /* [] */0
                  ]
                ]
              ]
            ] : /* :: */[
              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "class"),
              /* :: */[
                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], name),
                /* [] */0
              ]
            ];
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                                Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Prettier.doc.builders.line, decl),
                                /* :: */[
                                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " {"),
                                  /* [] */0
                                ]
                              ])),
                      /* :: */[
                        Prettier.doc.builders.indent(Render$LonaCompilerCore.prefixAll(Prettier.doc.builders.hardline, List.map(render, ast[2]))),
                        /* :: */[
                          Prettier.doc.builders.hardline,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "};"),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]);
      case 4 : 
          var parameterList = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Prettier.doc.builders.line, List.map(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ast[1]));
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ast[0]),
                                /* :: */[
                                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                                  /* :: */[
                                    parameterList,
                                    /* :: */[
                                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                                      /* :: */[
                                        Prettier.doc.builders.line,
                                        /* :: */[
                                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"),
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ])),
                      /* :: */[
                        Prettier.doc.builders.indent(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Prettier.doc.builders.hardline, List.map(render, ast[2]))),
                        /* :: */[
                          Prettier.doc.builders.line,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]);
      case 5 : 
          var parameterList$1 = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ", "), List.map(render, ast[1]));
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* fill */3], /* :: */[
                      render(ast[0]),
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                        /* :: */[
                          parameterList$1,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]);
      case 6 : 
          var value = render(ast[1]);
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ast[0]),
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "={"),
                        /* :: */[
                          value,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]);
      case 7 : 
          var tag = ast[0];
          var openingContent = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Prettier.doc.builders.line, List.map(render, ast[1]));
          var opening = Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "<"),
                    /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], tag),
                      /* :: */[
                        Prettier.doc.builders.indent(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                                  Prettier.doc.builders.line,
                                  /* :: */[
                                    openingContent,
                                    /* [] */0
                                  ]
                                ])),
                        /* :: */[
                          Prettier.doc.builders.softline,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ">"),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]));
          var closing = Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "</"),
                    /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], tag),
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ">"),
                        /* [] */0
                      ]
                    ]
                  ]));
          var children = Prettier.doc.builders.indent(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                    Prettier.doc.builders.line,
                    /* :: */[
                      Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Prettier.doc.builders.line, List.map(render, ast[2])),
                      /* [] */0
                    ]
                  ]));
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      opening,
                      /* :: */[
                        children,
                        /* :: */[
                          Prettier.doc.builders.line,
                          /* :: */[
                            closing,
                            /* [] */0
                          ]
                        ]
                      ]
                    ]);
      case 8 : 
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "let "),
                          /* :: */[
                            render(ast[0]),
                            /* :: */[
                              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ";"),
                              /* [] */0
                            ]
                          ]
                        ]));
      case 9 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* fill */3], /* :: */[
                      Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                                render(ast[0]),
                                /* :: */[
                                  Prettier.doc.builders.line,
                                  /* :: */[
                                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "="),
                                    /* [] */0
                                  ]
                                ]
                              ])),
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " "),
                        /* :: */[
                          render(ast[1]),
                          /* [] */0
                        ]
                      ]
                    ]);
      case 10 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      render(ast[0]),
                      /* :: */[
                        renderBinaryOperator(ast[1]),
                        /* :: */[
                          render(ast[2]),
                          /* [] */0
                        ]
                      ]
                    ]);
      case 11 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "if"),
                                /* :: */[
                                  Prettier.doc.builders.line,
                                  /* :: */[
                                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                                    /* :: */[
                                      Prettier.doc.builders.softline,
                                      /* :: */[
                                        render(ast[0]),
                                        /* :: */[
                                          Prettier.doc.builders.softline,
                                          /* :: */[
                                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                                            /* :: */[
                                              Prettier.doc.builders.line,
                                              /* :: */[
                                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"),
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ])),
                      /* :: */[
                        Prettier.doc.builders.indent(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Prettier.doc.builders.hardline, List.map(render, ast[1]))),
                        /* :: */[
                          Prettier.doc.builders.hardline,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]);
      case 12 : 
          var body = ast[0];
          var match = +(List.length(body) > 0);
          var maybeLine = match !== 0 ? Prettier.doc.builders.line : Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "");
          var body$1 = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ","),
                    /* :: */[
                      Prettier.doc.builders.line,
                      /* [] */0
                    ]
                  ]), List.map(render, body));
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "["),
                          /* :: */[
                            Prettier.doc.builders.indent(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                                      maybeLine,
                                      /* :: */[
                                        body$1,
                                        /* [] */0
                                      ]
                                    ])),
                            /* :: */[
                              maybeLine,
                              /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "]"),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]));
      case 13 : 
          var body$2 = ast[0];
          var match$1 = +(List.length(body$2) > 0);
          var maybeLine$1 = match$1 !== 0 ? Prettier.doc.builders.line : Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "");
          var body$3 = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ","),
                    /* :: */[
                      Prettier.doc.builders.line,
                      /* [] */0
                    ]
                  ]), List.map(render, body$2));
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"),
                          /* :: */[
                            Prettier.doc.builders.indent(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                                      maybeLine$1,
                                      /* :: */[
                                        body$3,
                                        /* [] */0
                                      ]
                                    ])),
                            /* :: */[
                              maybeLine$1,
                              /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]));
      case 14 : 
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          render(ast[0]),
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ": "),
                            /* :: */[
                              render(ast[1]),
                              /* [] */0
                            ]
                          ]
                        ]));
      case 15 : 
          return Render$LonaCompilerCore.prefixAll(Prettier.doc.builders.hardline, List.map(render, ast[0]));
      case 16 : 
          return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Prettier.doc.builders.hardline,
                          /* :: */[
                            Prettier.doc.builders.hardline,
                            /* [] */0
                          ]
                        ]), List.map(render, ast[0]));
      
    }
  }
}

function toString(ast) {
  var doc = render(ast);
  var printerOptions = {
    printWidth: 80,
    tabWidth: 2,
    useTabs: /* false */0
  };
  return Prettier.doc.printer.printDocToString(doc, printerOptions).formatted;
}

var Render = /* module */[
  /* renderBinaryOperator */renderBinaryOperator,
  /* render */render,
  /* toString */toString
];

function logicValueToJavaScriptAST(x) {
  if (typeof x === "number") {
    return /* Unknown */0;
  } else if (x.tag) {
    return /* Literal */Block.__(1, [x[0]]);
  } else {
    return /* Identifier */Block.__(2, [x[1]]);
  }
}

function toJavaScriptAST(node) {
  var fromCmp = function (x) {
    switch (x) {
      case 0 : 
          return /* Eq */0;
      case 1 : 
          return /* Neq */1;
      case 2 : 
          return /* Gt */2;
      case 3 : 
          return /* Gte */3;
      case 4 : 
          return /* Lt */4;
      case 5 : 
          return /* Lte */5;
      case 6 : 
          return /* Noop */7;
      
    }
  };
  if (typeof node === "number") {
    return /* Unknown */0;
  } else {
    switch (node.tag | 0) {
      case 0 : 
          var condition_000 = logicValueToJavaScriptAST(node[0]);
          var condition_001 = fromCmp(node[1]);
          var condition_002 = logicValueToJavaScriptAST(node[2]);
          var condition = /* BooleanExpression */Block.__(10, [
              condition_000,
              condition_001,
              condition_002
            ]);
          return /* ConditionalStatement */Block.__(11, [
                    condition,
                    /* :: */[
                      toJavaScriptAST(node[3]),
                      /* [] */0
                    ]
                  ]);
      case 1 : 
          return /* ConditionalStatement */Block.__(11, [
                    logicValueToJavaScriptAST(node[0]),
                    /* :: */[
                      toJavaScriptAST(node[1]),
                      /* [] */0
                    ]
                  ]);
      case 2 : 
          return /* AssignmentExpression */Block.__(9, [
                    logicValueToJavaScriptAST(node[1]),
                    logicValueToJavaScriptAST(node[0])
                  ]);
      case 3 : 
          var addition_000 = logicValueToJavaScriptAST(node[0]);
          var addition_002 = logicValueToJavaScriptAST(node[1]);
          var addition = /* BooleanExpression */Block.__(10, [
              addition_000,
              /* Plus */6,
              addition_002
            ]);
          return /* AssignmentExpression */Block.__(9, [
                    logicValueToJavaScriptAST(node[2]),
                    addition
                  ]);
      case 4 : 
          var value = node[0];
          if (typeof value === "number" || value.tag) {
            return /* Unknown */0;
          } else {
            return /* VariableDeclaration */Block.__(8, [/* Identifier */Block.__(2, [value[1]])]);
          }
          break;
      case 5 : 
          return /* Block */Block.__(15, [List.map(toJavaScriptAST, node[0])]);
      
    }
  }
}

function createStyleAttributeAST(layerName, styles) {
  return /* JSXAttribute */Block.__(6, [
            "style",
            /* ArrayLiteral */Block.__(12, [/* :: */[
                  /* Identifier */Block.__(2, [/* :: */[
                        "styles",
                        /* :: */[
                          layerName,
                          /* [] */0
                        ]
                      ]]),
                  /* :: */[
                    /* ObjectLiteral */Block.__(13, [Layer$LonaCompilerCore.mapBindings((function (param) {
                                return /* ObjectProperty */Block.__(14, [
                                          /* Identifier */Block.__(2, [/* :: */[
                                                param[0],
                                                /* [] */0
                                              ]]),
                                          logicValueToJavaScriptAST(param[1])
                                        ]);
                              }), styles)]),
                    /* [] */0
                  ]
                ]])
          ]);
}

function layerToJavaScriptAST(variableMap, layer) {
  var match = Layer$LonaCompilerCore.splitParamsMap(Layer$LonaCompilerCore.parameterMapToLogicValueMap(layer[/* parameters */2]));
  var match$1 = Layer$LonaCompilerCore.LayerMap[/* find_opt */24](layer, variableMap);
  var match$2 = Layer$LonaCompilerCore.splitParamsMap(match$1 ? match$1[0] : StringMap$LonaCompilerCore.empty);
  var main = StringMap$LonaCompilerCore.assign(match[1], match$2[1]);
  var styleAttribute = createStyleAttributeAST(layer[/* name */1], match$2[0]);
  var attributes = Layer$LonaCompilerCore.mapBindings((function (param) {
          return /* JSXAttribute */Block.__(6, [
                    param[0],
                    logicValueToJavaScriptAST(param[1])
                  ]);
        }), main);
  return /* JSXElement */Block.__(7, [
            Layer$LonaCompilerCore.layerTypeToString(layer[/* typeName */0]),
            /* :: */[
              styleAttribute,
              attributes
            ],
            List.map((function (param) {
                    return layerToJavaScriptAST(variableMap, param);
                  }), layer[/* children */3])
          ]);
}

function toJavaScriptStyleSheetAST(layer) {
  var createStyleObjectForLayer = function (layer) {
    var styleParams = Curry._2(StringMap$LonaCompilerCore.filter, (function (key, _) {
            return Layer$LonaCompilerCore.parameterIsStyle(key);
          }), layer[/* parameters */2]);
    return /* ObjectProperty */Block.__(14, [
              /* Identifier */Block.__(2, [/* :: */[
                    layer[/* name */1],
                    /* [] */0
                  ]]),
              /* ObjectLiteral */Block.__(13, [List.map((function (param) {
                          return /* ObjectProperty */Block.__(14, [
                                    /* Identifier */Block.__(2, [/* :: */[
                                          param[0],
                                          /* [] */0
                                        ]]),
                                    /* Literal */Block.__(1, [param[1]])
                                  ]);
                        }), Curry._1(StringMap$LonaCompilerCore.bindings, styleParams))])
            ]);
  };
  var styleObjects = List.map(createStyleObjectForLayer, Layer$LonaCompilerCore.flatten(layer));
  return /* VariableDeclaration */Block.__(8, [/* AssignmentExpression */Block.__(9, [
                /* Identifier */Block.__(2, [/* :: */[
                      "styles",
                      /* [] */0
                    ]]),
                /* CallExpression */Block.__(5, [
                    /* Identifier */Block.__(2, [/* :: */[
                          "StyleSheet",
                          /* :: */[
                            "create",
                            /* [] */0
                          ]
                        ]]),
                    /* :: */[
                      /* ObjectLiteral */Block.__(13, [styleObjects]),
                      /* [] */0
                    ]
                  ])
              ])]);
}

function generate(name, json) {
  var rootLayer = Decode$LonaCompilerCore.Component[/* rootLayer */1](json);
  var logic = Logic$LonaCompilerCore.addVariableDeclarations(Decode$LonaCompilerCore.Component[/* logic */2](json));
  var assignments = Layer$LonaCompilerCore.parameterAssignmentsFromLogic(rootLayer, logic);
  var rootLayerAST = layerToJavaScriptAST(assignments, rootLayer);
  var styleSheetAST = toJavaScriptStyleSheetAST(rootLayer);
  var logicAST = map(optimizeTruthyBooleanExpression, toJavaScriptAST(logic));
  return map(renameIdentifiers, /* Program */Block.__(16, [/* :: */[
                  /* Class */Block.__(3, [
                      name,
                      /* Some */["React.Component"],
                      /* :: */[
                        /* Method */Block.__(4, [
                            "render",
                            /* [] */0,
                            /* :: */[
                              logicAST,
                              /* :: */[
                                /* Return */Block.__(0, [rootLayerAST]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]),
                  /* :: */[
                    styleSheetAST,
                    /* [] */0
                  ]
                ]]));
}

var Component = /* module */[/* generate */generate];

exports.Ast                       = Ast;
exports.Render                    = Render;
exports.logicValueToJavaScriptAST = logicValueToJavaScriptAST;
exports.toJavaScriptAST           = toJavaScriptAST;
exports.createStyleAttributeAST   = createStyleAttributeAST;
exports.layerToJavaScriptAST      = layerToJavaScriptAST;
exports.toJavaScriptStyleSheetAST = toJavaScriptStyleSheetAST;
exports.Component                 = Component;
/* prettier Not a pure module */
