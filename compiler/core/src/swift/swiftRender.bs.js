// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                      = require("bs-platform/lib/js/list.js");
var Block                     = require("bs-platform/lib/js/block.js");
var Curry                     = require("bs-platform/lib/js/curry.js");
var Prettier                  = require("prettier");
var Pervasives                = require("bs-platform/lib/js/pervasives.js");
var Css$LonaCompilerCore      = require("../utils/css.bs.js");
var Render$LonaCompilerCore   = require("../core/render.bs.js");
var Prettier$LonaCompilerCore = require("../utils/prettier.bs.js");

function renderFloat(value) {
  var string = Pervasives.string_of_float(value);
  var match = +string.endsWith(".");
  return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], match !== 0 ? string.slice(0, -1) : string);
}

function renderAccessLevelModifier(node) {
  switch (node) {
    case 0 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "private");
    case 1 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "fileprivate");
    case 2 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "internal");
    case 3 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "public");
    case 4 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "open");
    
  }
}

function renderMutationModifier(node) {
  if (node !== 0) {
    return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "nonmutating");
  } else {
    return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "mutating");
  }
}

function renderDeclarationModifier(node) {
  if (typeof node === "number") {
    switch (node) {
      case 0 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "class");
      case 1 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "convenience");
      case 2 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "dynamic");
      case 3 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "final");
      case 4 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "infix");
      case 5 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "lazy");
      case 6 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "optional");
      case 7 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "override");
      case 8 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "postfix");
      case 9 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "prefix");
      case 10 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "required");
      case 11 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "static");
      case 12 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "unowned");
      case 13 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "unownedsafe");
      case 14 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "unownedunsafe");
      case 15 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "weak");
      
    }
  } else if (node.tag) {
    return renderMutationModifier(node[0]);
  } else {
    return renderAccessLevelModifier(node[0]);
  }
}

function render(ast) {
  if (typeof ast === "number") {
    return Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1];
  } else {
    switch (ast.tag | 0) {
      case 0 : 
          return renderLiteral(ast[0]);
      case 1 : 
          return Prettier.doc.builders.group(Prettier.doc.builders.indent(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                                  Prettier.doc.builders.softline,
                                  /* :: */[
                                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "."),
                                    /* [] */0
                                  ]
                                ]), List.map(render, ast[0]))));
      case 2 : 
          var o = ast[0];
          return Prettier.doc.builders.group(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], render(o.left), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " ")), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o.operator)), Prettier.doc.builders.indent(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Prettier.doc.builders.line, render(o.right)))));
      case 3 : 
          var o$1 = ast[0];
          var match = o$1.expression;
          var exit = 0;
          if (typeof match === "number") {
            exit = 1;
          } else {
            switch (match.tag | 0) {
              case 0 : 
              case 1 : 
              case 6 : 
                  exit = 2;
                  break;
              default:
                exit = 1;
            }
          }
          switch (exit) {
            case 1 : 
                return Prettier.doc.builders.group(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o$1.operator), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "(")), Prettier.doc.builders.softline), render(o$1.expression)), Prettier.doc.builders.softline), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")")));
            case 2 : 
                return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o$1.operator), render(o$1.expression));
            
          }
          break;
      case 4 : 
          var o$2 = ast[0];
          var match$1 = o$2.isFinal;
          var maybeFinal = match$1 !== 0 ? Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "final"), Prettier.doc.builders.line) : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1];
          var match$2 = +(o$2.modifier !== /* None */0);
          var maybeModifier = match$2 !== 0 ? Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                  Render$LonaCompilerCore.renderOptional(renderAccessLevelModifier, o$2.modifier),
                  /* :: */[
                    Prettier.doc.builders.line,
                    /* [] */0
                  ]
                ]) : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1];
          var typeAnnotations = o$2.inherits;
          var maybeInherits = typeAnnotations ? Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ": "), Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ", "), List.map(renderTypeAnnotation, typeAnnotations))) : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1];
          var opening = Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                    maybeModifier,
                    /* :: */[
                      maybeFinal,
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "class"),
                        /* :: */[
                          Prettier.doc.builders.line,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o$2.name),
                            /* :: */[
                              maybeInherits,
                              /* :: */[
                                Prettier.doc.builders.line,
                                /* :: */[
                                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]));
          var closing = Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                Prettier.doc.builders.hardline,
                /* :: */[
                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"),
                  /* [] */0
                ]
              ]);
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      opening,
                      /* :: */[
                        Prettier.doc.builders.indent(Render$LonaCompilerCore.prefixAll(Prettier.doc.builders.hardline, List.map(render, o$2.body))),
                        /* :: */[
                          closing,
                          /* [] */0
                        ]
                      ]
                    ]);
      case 5 : 
          var o$3 = ast[0];
          var match$3 = +(o$3.modifier !== /* None */0);
          var maybeModifier$1 = match$3 !== 0 ? Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                  Render$LonaCompilerCore.renderOptional(renderAccessLevelModifier, o$3.modifier),
                  /* :: */[
                    Prettier.doc.builders.line,
                    /* [] */0
                  ]
                ]) : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1];
          var opening$1 = Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                    maybeModifier$1,
                    /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "enum"),
                      /* :: */[
                        Prettier.doc.builders.line,
                        /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o$3.name),
                          /* :: */[
                            Prettier.doc.builders.line,
                            /* :: */[
                              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"),
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]));
          var closing$1 = Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                Prettier.doc.builders.hardline,
                /* :: */[
                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"),
                  /* [] */0
                ]
              ]);
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      opening$1,
                      /* :: */[
                        Prettier.doc.builders.indent(Render$LonaCompilerCore.prefixAll(Prettier.doc.builders.hardline, List.map(render, o$3.body))),
                        /* :: */[
                          closing$1,
                          /* [] */0
                        ]
                      ]
                    ]);
      case 6 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ast[0]);
      case 7 : 
          var o$4 = ast[0];
          var modifiers = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " "), List.map(renderDeclarationModifier, o$4.modifiers));
          var match$4 = +(o$4.init === /* None */0);
          var maybeInit = match$4 !== 0 ? Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1] : Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " = "),
                  /* :: */[
                    Render$LonaCompilerCore.renderOptional(render, o$4.init),
                    /* [] */0
                  ]
                ]);
          var match$5 = +(List.length(o$4.modifiers) > 0);
          var parts_001 = /* :: */[
            match$5 !== 0 ? Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " ") : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1],
            /* :: */[
              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "let "),
              /* :: */[
                renderPattern(o$4.pattern),
                /* :: */[
                  maybeInit,
                  /* [] */0
                ]
              ]
            ]
          ];
          var parts = /* :: */[
            modifiers,
            parts_001
          ];
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], parts));
      case 8 : 
          var o$5 = ast[0];
          var modifiers$1 = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " "), List.map(renderDeclarationModifier, o$5.modifiers));
          var match$6 = +(o$5.init === /* None */0);
          var maybeInit$1 = match$6 !== 0 ? Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1] : Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " = "),
                  /* :: */[
                    Render$LonaCompilerCore.renderOptional(render, o$5.init),
                    /* [] */0
                  ]
                ]);
          var maybeBlock = Render$LonaCompilerCore.renderOptional((function (block) {
                  return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Prettier.doc.builders.line, renderInitializerBlock(block));
                }), o$5.block);
          var match$7 = +(List.length(o$5.modifiers) > 0);
          var parts_001$1 = /* :: */[
            match$7 !== 0 ? Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " ") : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1],
            /* :: */[
              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "var "),
              /* :: */[
                renderPattern(o$5.pattern),
                /* :: */[
                  maybeInit$1,
                  /* :: */[
                    maybeBlock,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ];
          var parts$1 = /* :: */[
            modifiers$1,
            parts_001$1
          ];
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], parts$1));
      case 9 : 
          var o$6 = ast[0];
          var match$8 = +(List.length(o$6.modifiers) > 0);
          var parts_000 = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " "), List.map(renderDeclarationModifier, o$6.modifiers));
          var parts_001$2 = /* :: */[
            match$8 !== 0 ? Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " ") : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1],
            /* :: */[
              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "init"),
              /* :: */[
                Render$LonaCompilerCore.renderOptional(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o$6.failable),
                /* :: */[
                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                  /* :: */[
                    Prettier.doc.builders.indent(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Prettier.doc.builders.softline, Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ","), Prettier.doc.builders.line), List.map(render, o$6.parameters)))),
                    /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                      /* :: */[
                        Prettier.doc.builders.line,
                        /* :: */[
                          render(/* CodeBlock */Block.__(20, [{
                                    statements: o$6.body
                                  }])),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ];
          var parts$2 = /* :: */[
            parts_000,
            parts_001$2
          ];
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], parts$2));
      case 10 : 
          var o$7 = ast[0];
          var renderResult = function (result) {
            return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " -> "), renderTypeAnnotation(result));
          };
          var match$9 = +(List.length(o$7.modifiers) > 0);
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                                    Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " "), List.map(renderDeclarationModifier, o$7.modifiers)),
                                    /* :: */[
                                      match$9 !== 0 ? Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " ") : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1],
                                      /* :: */[
                                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "func "),
                                        /* :: */[
                                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o$7.name),
                                          /* :: */[
                                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                                            /* :: */[
                                              Prettier.doc.builders.indent(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Prettier.doc.builders.softline, Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ","), Prettier.doc.builders.line), List.map(render, o$7.parameters)))),
                                              /* :: */[
                                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                                                /* :: */[
                                                  Render$LonaCompilerCore.renderOptional(renderResult, o$7.result),
                                                  /* [] */0
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ])),
                          /* :: */[
                            Prettier.doc.builders.line,
                            /* :: */[
                              render(/* CodeBlock */Block.__(20, [{
                                        statements: o$7.body
                                      }])),
                              /* [] */0
                            ]
                          ]
                        ]));
      case 11 : 
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "import"),
                          /* :: */[
                            Prettier.doc.builders.line,
                            /* :: */[
                              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ast[0]),
                              /* [] */0
                            ]
                          ]
                        ]));
      case 12 : 
          var o$8 = ast[0];
          return Prettier.doc.builders.group(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "if"), Prettier.doc.builders.line), render(o$8.condition)), Prettier.doc.builders.line), render(/* CodeBlock */Block.__(20, [{
                                  statements: o$8.block
                                }]))));
      case 13 : 
          return Prettier.doc.builders.group(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "return "), Render$LonaCompilerCore.renderOptional(render, ast[0])));
      case 14 : 
          var o$9 = ast[0];
          return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Render$LonaCompilerCore.renderOptional((function (name) {
                                        return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], name), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " "));
                                      }), o$9.externalName), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o$9.localName)), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ": ")), renderTypeAnnotation(o$9.annotation)), Render$LonaCompilerCore.renderOptional((function (node) {
                            return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " = "), render(node));
                          }), o$9.defaultValue));
      case 15 : 
          var o$10 = ast[0];
          var match$10 = o$10.name;
          if (match$10) {
            return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                            render(match$10[0]),
                            /* :: */[
                              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ":"),
                              /* :: */[
                                Prettier.doc.builders.line,
                                /* :: */[
                                  render(o$10.value),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]));
          } else {
            return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                            render(o$10.value),
                            /* [] */0
                          ]));
          }
      case 16 : 
          var o$11 = ast[0];
          var match$11 = o$11.arguments;
          var endsWithLiteral;
          if (match$11) {
            var match$12 = match$11[0];
            if (typeof match$12 === "number") {
              endsWithLiteral = /* true */1;
            } else if (match$12.tag === 15) {
              if (match$11[1]) {
                endsWithLiteral = /* true */1;
              } else {
                var match$13 = match$12[0].value;
                endsWithLiteral = typeof match$13 === "number" || match$13.tag ? /* true */1 : /* false */0;
              }
            } else {
              endsWithLiteral = /* true */1;
            }
          } else {
            endsWithLiteral = /* true */1;
          }
          var $$arguments = Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                endsWithLiteral !== 0 ? Prettier.doc.builders.softline : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1],
                /* :: */[
                  Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ","),
                            /* :: */[
                              Prettier.doc.builders.line,
                              /* [] */0
                            ]
                          ]), List.map(render, o$11.arguments)),
                  /* [] */0
                ]
              ]);
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          render(o$11.name),
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                            /* :: */[
                              endsWithLiteral !== 0 ? Prettier.doc.builders.indent($$arguments) : $$arguments,
                              /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]));
      case 17 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "// " + ast[0]);
      case 18 : 
          var comment = ast[0].match((/.{1,100}/g));
          if (comment !== null) {
            return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], comment.map((function (chunk) {
                                return "/// " + chunk;
                              })).join("\n"));
          } else {
            return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "///");
          }
      case 19 : 
          var o$12 = ast[0];
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      render(o$12.line),
                      /* :: */[
                        Prettier.doc.builders.lineSuffix(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " // " + o$12.comment)),
                        /* [] */0
                      ]
                    ]);
      case 20 : 
          var statements = ast[0].statements;
          if (statements) {
            return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"), Prettier.doc.builders.indent(Render$LonaCompilerCore.prefixAll(Prettier.doc.builders.hardline, List.map(render, statements)))), Prettier.doc.builders.hardline), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"));
          } else {
            return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{}");
          }
      case 21 : 
          return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Prettier.doc.builders.hardline, List.map(render, ast[0]));
      case 22 : 
          return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Prettier.doc.builders.hardline,
                          /* [] */0
                        ]), List.map(render, ast[0].statements));
      
    }
  }
}

function renderLiteral(node) {
  if (typeof node === "number") {
    return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "nil");
  } else {
    switch (node.tag | 0) {
      case 0 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], node[0] !== 0 ? "true" : "false");
      case 1 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], Pervasives.string_of_int(node[0]));
      case 2 : 
          return renderFloat(node[0]);
      case 3 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "\""),
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], node[0].replace((/"/g), "\\\"")),
                        /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "\""),
                          /* [] */0
                        ]
                      ]
                    ]);
      case 4 : 
          var rgba = Css$LonaCompilerCore.parseColorDefault("black", node[0]);
          var values_000 = Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "red: "),
                /* :: */[
                  renderFloat(rgba[/* r */0] / 255.0),
                  /* [] */0
                ]
              ]);
          var values_001 = /* :: */[
            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "green: "),
                  /* :: */[
                    renderFloat(rgba[/* g */1] / 255.0),
                    /* [] */0
                  ]
                ]),
            /* :: */[
              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "blue: "),
                    /* :: */[
                      renderFloat(rgba[/* b */2] / 255.0),
                      /* [] */0
                    ]
                  ]),
              /* :: */[
                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "alpha: "),
                      /* :: */[
                        renderFloat(rgba[/* a */3]),
                        /* [] */0
                      ]
                    ]),
                /* [] */0
              ]
            ]
          ];
          var values = /* :: */[
            values_000,
            values_001
          ];
          return Prettier.doc.builders.fixedWidth(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "#colorLiteral("),
                          /* :: */[
                            Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ", "), values),
                            /* :: */[
                              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                              /* [] */0
                            ]
                          ]
                        ]), 2);
      case 5 : 
          var body = node[0];
          var match = +(List.length(body) > 0);
          var maybeLine = match !== 0 ? Prettier.doc.builders.line : Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "");
          var body$1 = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ","),
                    /* :: */[
                      Prettier.doc.builders.line,
                      /* [] */0
                    ]
                  ]), List.map(render, body));
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "["),
                          /* :: */[
                            Prettier.doc.builders.indent(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                                      maybeLine,
                                      /* :: */[
                                        body$1,
                                        /* [] */0
                                      ]
                                    ])),
                            /* :: */[
                              maybeLine,
                              /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "]"),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]));
      
    }
  }
}

function renderTypeAnnotation(node) {
  switch (node.tag | 0) {
    case 0 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], node[0]);
    case 1 : 
        var o = node[0];
        return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                        renderTypeAnnotation(o.name),
                        /* :: */[
                          Prettier.doc.builders.line,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "."),
                            /* :: */[
                              Prettier.doc.builders.line,
                              /* :: */[
                                renderTypeAnnotation(o.member),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]));
    case 2 : 
        return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "["),
                        /* :: */[
                          renderTypeAnnotation(node[0].element),
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "]"),
                            /* [] */0
                          ]
                        ]
                      ]));
    case 3 : 
        var o$1 = node[0];
        return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "["),
                        /* :: */[
                          renderTypeAnnotation(o$1.key),
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ": "),
                            /* :: */[
                              renderTypeAnnotation(o$1.value),
                              /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "]"),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]));
    case 4 : 
        return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                        renderTypeAnnotation(node[0]),
                        /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "?"),
                          /* [] */0
                        ]
                      ]));
    case 5 : 
        return Prettier.doc.builders.group(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ", "), List.map(renderTypeAnnotation, node[0].list)));
    
  }
}

function renderPattern(node) {
  if (typeof node === "number") {
    return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "_");
  } else {
    switch (node.tag | 0) {
      case 0 : 
          var o = node[0];
          var match = o.annotation;
          if (match) {
            return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], render(o.identifier), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ": ")), renderTypeAnnotation(match[0]));
          } else {
            return render(o.identifier);
          }
      case 1 : 
          var o$1 = node[0];
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o$1.kind),
                          /* :: */[
                            Prettier.doc.builders.line,
                            /* :: */[
                              renderPattern(o$1.pattern),
                              /* [] */0
                            ]
                          ]
                        ]));
      case 2 : 
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                          /* :: */[
                            Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ", "), List.map(renderPattern, node[0].elements)),
                            /* :: */[
                              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                              /* [] */0
                            ]
                          ]
                        ]));
      case 3 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      renderPattern(node[0].value),
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "?"),
                        /* [] */0
                      ]
                    ]);
      case 4 : 
          return render(node[0].value);
      
    }
  }
}

function renderInitializerBlock(node) {
  var o = node[0];
  var renderStatements = function (statements) {
    if (statements) {
      if (statements[1]) {
        return render(/* CodeBlock */Block.__(20, [{
                        statements: statements
                      }]));
      } else {
        return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{ "), render(statements[0])), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " }"));
      }
    } else {
      return render(/* CodeBlock */Block.__(20, [{
                      statements: statements
                    }]));
    }
  };
  var willSet = Render$LonaCompilerCore.renderOptional((function (statements) {
          return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "willSet "), renderStatements(statements));
        }), o.willSet);
  var didSet = Render$LonaCompilerCore.renderOptional((function (statements) {
          return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "didSet "), renderStatements(statements));
        }), o.didSet);
  var match = o.willSet;
  var match$1 = o.didSet;
  if (match) {
    if (match$1) {
      return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"), Prettier.doc.builders.indent(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Prettier.doc.builders.hardline, willSet), Prettier.doc.builders.hardline), didSet))), Prettier.doc.builders.hardline), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"));
    } else {
      return Prettier.doc.builders.group(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Prettier.doc.builders.line, /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"),
                      /* :: */[
                        willSet,
                        /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"),
                          /* [] */0
                        ]
                      ]
                    ]));
    }
  } else if (match$1) {
    return Prettier.doc.builders.group(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Prettier.doc.builders.line, /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"),
                    /* :: */[
                      didSet,
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"),
                        /* [] */0
                      ]
                    ]
                  ]));
  } else {
    return Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1];
  }
}

function toString(ast) {
  var doc = render(ast);
  var printerOptions = {
    printWidth: 120,
    tabWidth: 2,
    useTabs: /* false */0
  };
  return Prettier.doc.printer.printDocToString(doc, printerOptions).formatted;
}

exports.renderFloat               = renderFloat;
exports.renderAccessLevelModifier = renderAccessLevelModifier;
exports.renderMutationModifier    = renderMutationModifier;
exports.renderDeclarationModifier = renderDeclarationModifier;
exports.render                    = render;
exports.renderLiteral             = renderLiteral;
exports.renderTypeAnnotation      = renderTypeAnnotation;
exports.renderPattern             = renderPattern;
exports.renderInitializerBlock    = renderInitializerBlock;
exports.toString                  = toString;
/* prettier Not a pure module */
