// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                    = require("bs-platform/lib/js/list.js");
var Block                   = require("bs-platform/lib/js/block.js");
var $$String                = require("bs-platform/lib/js/string.js");
var Ast$LonaCompilerCore    = require("./ast.bs.js");
var Layer$LonaCompilerCore  = require("./layer.bs.js");
var Logic$LonaCompilerCore  = require("./logic.bs.js");
var Decode$LonaCompilerCore = require("./decode.bs.js");

function generate(name, json) {
  var rootLayer = Decode$LonaCompilerCore.Component[/* rootLayer */1](json);
  var logic = Logic$LonaCompilerCore.addVariableDeclarations(Decode$LonaCompilerCore.Component[/* logic */2](json));
  var assignments = Layer$LonaCompilerCore.parameterAssignments(rootLayer, logic);
  var rootLayerAST = Layer$LonaCompilerCore.toJavaScriptAST(assignments, rootLayer);
  var styleSheetAST = Layer$LonaCompilerCore.toJavaScriptStyleSheetAST(rootLayer);
  var logicAST = Ast$LonaCompilerCore.JavaScript[/* optimize */3](Logic$LonaCompilerCore.toJavaScriptAST(logic));
  return Ast$LonaCompilerCore.JavaScript[/* prepareForRender */4](/* Program */Block.__(16, [/* :: */[
                  /* Class */Block.__(3, [
                      name,
                      /* Some */["React.Component"],
                      /* :: */[
                        /* Method */Block.__(4, [
                            "render",
                            /* [] */0,
                            /* :: */[
                              logicAST,
                              /* :: */[
                                /* Return */Block.__(0, [rootLayerAST]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]),
                  /* :: */[
                    styleSheetAST,
                    /* [] */0
                  ]
                ]]));
}

var JavaScript = /* module */[/* generate */generate];

function generate$1(name, json) {
  var rootLayer = Decode$LonaCompilerCore.Component[/* rootLayer */1](json);
  var nonRootLayers = List.tl(Layer$LonaCompilerCore.flatten(rootLayer));
  var parameters = Decode$LonaCompilerCore.Component[/* parameters */0](json);
  var typeAnnotationDoc = function (param) {
    if (param.tag) {
      return /* TypeName */Block.__(0, [param[0]]);
    } else {
      var typeName = param[0];
      if (typeName === "Boolean") {
        return /* TypeName */Block.__(0, ["Bool"]);
      } else {
        return /* TypeName */Block.__(0, [typeName]);
      }
    }
  };
  var parameterVariableDoc = function (parameter) {
    return /* VariableDeclaration */Block.__(6, [{
                modifiers: /* [] */0,
                pattern: /* IdentifierPattern */Block.__(0, [{
                      identifier: parameter[/* name */0],
                      annotation: /* Some */[typeAnnotationDoc(parameter[/* ltype */1])]
                    }]),
                init: /* None */0,
                block: /* Some */[/* WillSetDidSetBlock */[{
                      willSet: /* None */0,
                      didSet: /* Some */[/* :: */[
                          /* FunctionCallExpression */Block.__(11, [{
                                name: /* SwiftIdentifier */Block.__(4, ["update"]),
                                arguments: /* [] */0
                              }]),
                          /* [] */0
                        ]]
                    }]]
              }]);
  };
  var viewTypeDoc = function (param) {
    switch (param) {
      case 0 : 
          return /* TypeName */Block.__(0, ["UIView"]);
      case 1 : 
          return /* TypeName */Block.__(0, ["UILabel"]);
      case 2 : 
          return /* TypeName */Block.__(0, ["UIImageView"]);
      case 3 : 
      case 4 : 
      case 5 : 
      case 6 : 
          return /* TypeName */Block.__(0, ["TypeUnknown"]);
      
    }
  };
  var viewTypeInitDoc = function (param) {
    switch (param) {
      case 0 : 
          return /* SwiftIdentifier */Block.__(4, ["UIView"]);
      case 1 : 
          return /* SwiftIdentifier */Block.__(4, ["UILabel"]);
      case 2 : 
          return /* SwiftIdentifier */Block.__(4, ["UIImageView"]);
      case 3 : 
      case 4 : 
      case 5 : 
      case 6 : 
          return /* SwiftIdentifier */Block.__(4, ["TypeUnknown"]);
      
    }
  };
  var viewVariableDoc = function (param) {
    var layerType = param[0];
    return /* VariableDeclaration */Block.__(6, [{
                modifiers: /* [] */0,
                pattern: /* IdentifierPattern */Block.__(0, [{
                      identifier: $$String.lowercase(param[1]).replace(" ", "") + "View",
                      annotation: /* Some */[viewTypeDoc(layerType)]
                    }]),
                init: /* Some */[/* FunctionCallExpression */Block.__(11, [{
                        name: viewTypeInitDoc(layerType),
                        arguments: /* :: */[
                          /* FunctionCallArgument */Block.__(10, [{
                                name: /* Some */[/* SwiftIdentifier */Block.__(4, ["frame"])],
                                value: /* SwiftIdentifier */Block.__(4, [".zero"])
                              }]),
                          /* [] */0
                        ]
                      }])],
                block: /* None */0
              }]);
  };
  var initParameterDoc = function (parameter) {
    return /* Parameter */Block.__(9, [{
                externalName: /* None */0,
                localName: parameter[/* name */0],
                annotation: typeAnnotationDoc(parameter[/* ltype */1]),
                defaultValue: /* None */0
              }]);
  };
  var initParameterAssignmentDoc = function (parameter) {
    return /* BinaryExpression */Block.__(2, [{
                left: /* MemberExpression */Block.__(1, [/* :: */[
                      /* SwiftIdentifier */Block.__(4, ["self"]),
                      /* :: */[
                        /* SwiftIdentifier */Block.__(4, [parameter[/* name */0]]),
                        /* [] */0
                      ]
                    ]]),
                operator: "=",
                right: /* SwiftIdentifier */Block.__(4, [parameter[/* name */0]])
              }]);
  };
  var initializerDoc = function () {
    return /* InitializerDeclaration */Block.__(7, [{
                modifiers: /* :: */[
                  /* AccessLevelModifier */Block.__(0, [/* PublicModifier */3]),
                  /* [] */0
                ],
                parameters: List.map(initParameterDoc, parameters),
                failable: /* None */0,
                body: List.concat(/* :: */[
                      List.map(initParameterAssignmentDoc, parameters),
                      /* :: */[
                        /* :: */[
                          /* Empty */0,
                          /* :: */[
                            /* MemberExpression */Block.__(1, [/* :: */[
                                  /* SwiftIdentifier */Block.__(4, ["super"]),
                                  /* :: */[
                                    /* FunctionCallExpression */Block.__(11, [{
                                          name: /* SwiftIdentifier */Block.__(4, ["init"]),
                                          arguments: /* :: */[
                                            /* FunctionCallArgument */Block.__(10, [{
                                                  name: /* Some */[/* SwiftIdentifier */Block.__(4, ["frame"])],
                                                  value: /* SwiftIdentifier */Block.__(4, [".zero"])
                                                }]),
                                            /* [] */0
                                          ]
                                        }]),
                                    /* [] */0
                                  ]
                                ]]),
                            /* :: */[
                              /* Empty */0,
                              /* :: */[
                                /* FunctionCallExpression */Block.__(11, [{
                                      name: /* SwiftIdentifier */Block.__(4, ["setUpViews"]),
                                      arguments: /* [] */0
                                    }]),
                                /* :: */[
                                  /* FunctionCallExpression */Block.__(11, [{
                                        name: /* SwiftIdentifier */Block.__(4, ["setUpConstraints"]),
                                        arguments: /* [] */0
                                      }]),
                                  /* :: */[
                                    /* FunctionCallExpression */Block.__(11, [{
                                          name: /* SwiftIdentifier */Block.__(4, ["setUpDefaults"]),
                                          arguments: /* [] */0
                                        }]),
                                    /* :: */[
                                      /* Empty */0,
                                      /* :: */[
                                        /* FunctionCallExpression */Block.__(11, [{
                                              name: /* SwiftIdentifier */Block.__(4, ["update"]),
                                              arguments: /* [] */0
                                            }]),
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ],
                        /* [] */0
                      ]
                    ])
              }]);
  };
  return /* TopLevelDeclaration */Block.__(15, [{
              statements: /* :: */[
                /* ImportDeclaration */Block.__(8, ["UIKit"]),
                /* :: */[
                  /* ImportDeclaration */Block.__(8, ["Foundation"]),
                  /* :: */[
                    /* ClassDeclaration */Block.__(3, [{
                          name: name,
                          inherits: /* :: */[
                            /* TypeName */Block.__(0, ["UIView"]),
                            /* [] */0
                          ],
                          modifier: /* None */0,
                          isFinal: /* false */0,
                          body: List.concat(/* :: */[
                                /* :: */[
                                  /* LineComment */Block.__(12, ["Parameters"]),
                                  /* [] */0
                                ],
                                /* :: */[
                                  List.map(parameterVariableDoc, parameters),
                                  /* :: */[
                                    /* :: */[
                                      /* LineComment */Block.__(12, ["Views"]),
                                      /* [] */0
                                    ],
                                    /* :: */[
                                      List.map(viewVariableDoc, nonRootLayers),
                                      /* :: */[
                                        /* :: */[
                                          /* Empty */0,
                                          /* [] */0
                                        ],
                                        /* :: */[
                                          /* :: */[
                                            initializerDoc(/* () */0),
                                            /* [] */0
                                          ],
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ])
                        }]),
                    /* [] */0
                  ]
                ]
              ]
            }]);
}

var Swift = /* module */[/* generate */generate$1];

exports.JavaScript = JavaScript;
exports.Swift      = Swift;
/* Layer-LonaCompilerCore Not a pure module */
