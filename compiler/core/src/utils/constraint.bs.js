// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Map                   = require("bs-platform/lib/js/map.js");
var Curry                   = require("bs-platform/lib/js/curry.js");
var Caml_obj                = require("bs-platform/lib/js/caml_obj.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function anchorToString(param) {
  switch (param) {
    case 0 : 
        return "widthAnchor";
    case 1 : 
        return "heightAnchor";
    case 2 : 
        return "topAnchor";
    case 3 : 
        return "bottomAnchor";
    case 4 : 
        return "leadingAnchor";
    case 5 : 
        return "trailingAnchor";
    
  }
}

function anchorFromString(param) {
  switch (param) {
    case "bottomAnchor" : 
        return /* Bottom */3;
    case "heightAnchor" : 
        return /* Height */1;
    case "leadingAnchor" : 
        return /* Leading */4;
    case "topAnchor" : 
        return /* Top */2;
    case "trailingAnchor" : 
        return /* Trailing */5;
    case "widthAnchor" : 
        return /* Width */0;
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            [
              "/Users/devin_abbott/Projects/ComponentStudio/ComponentStudio/compiler/core/src/utils/constraint.re",
              28,
              2
            ]
          ];
  }
}

function relationFromString(param) {
  switch (param) {
    case "equalTo" : 
        return /* Eq */0;
    case "greaterThanOrEqualTo" : 
        return /* Geq */1;
    case "lessThanOrEqualTo" : 
        return /* Leq */2;
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            [
              "/Users/devin_abbott/Projects/ComponentStudio/ComponentStudio/compiler/core/src/utils/constraint.re",
              37,
              2
            ]
          ];
  }
}

function relationToString(param) {
  switch (param) {
    case 0 : 
        return "equalTo";
    case 1 : 
        return "greaterThanOrEqualTo";
    case 2 : 
        return "lessThanOrEqualTo";
    
  }
}

function compare(a, b) {
  if (a.tag) {
    if (b.tag) {
      return Caml_obj.caml_compare(/* tuple */[
                  a[0][/* name */1],
                  a[1],
                  a[3][/* name */1],
                  a[4]
                ], /* tuple */[
                  b[0][/* name */1],
                  b[1],
                  b[3][/* name */1],
                  b[4]
                ]);
    } else {
      return -1;
    }
  } else if (b.tag) {
    return 1;
  } else {
    return Caml_obj.caml_compare(/* tuple */[
                a[0][/* name */1],
                a[1]
              ], /* tuple */[
                b[0][/* name */1],
                b[1]
              ]);
  }
}

var include = $$Map.Make(/* module */[/* compare */compare]);

var find = include[21];

function find_opt(key, map) {
  var exit = 0;
  var item;
  try {
    item = Curry._2(find, key, map);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* Some */[item];
  }
  
}

var ConstraintMap_000 = /* empty */include[0];

var ConstraintMap_001 = /* is_empty */include[1];

var ConstraintMap_002 = /* mem */include[2];

var ConstraintMap_003 = /* add */include[3];

var ConstraintMap_004 = /* singleton */include[4];

var ConstraintMap_005 = /* remove */include[5];

var ConstraintMap_006 = /* merge */include[6];

var ConstraintMap_007 = /* compare */include[7];

var ConstraintMap_008 = /* equal */include[8];

var ConstraintMap_009 = /* iter */include[9];

var ConstraintMap_010 = /* fold */include[10];

var ConstraintMap_011 = /* for_all */include[11];

var ConstraintMap_012 = /* exists */include[12];

var ConstraintMap_013 = /* filter */include[13];

var ConstraintMap_014 = /* partition */include[14];

var ConstraintMap_015 = /* cardinal */include[15];

var ConstraintMap_016 = /* bindings */include[16];

var ConstraintMap_017 = /* min_binding */include[17];

var ConstraintMap_018 = /* max_binding */include[18];

var ConstraintMap_019 = /* choose */include[19];

var ConstraintMap_020 = /* split */include[20];

var ConstraintMap_022 = /* map */include[22];

var ConstraintMap_023 = /* mapi */include[23];

var ConstraintMap = /* module */[
  ConstraintMap_000,
  ConstraintMap_001,
  ConstraintMap_002,
  ConstraintMap_003,
  ConstraintMap_004,
  ConstraintMap_005,
  ConstraintMap_006,
  ConstraintMap_007,
  ConstraintMap_008,
  ConstraintMap_009,
  ConstraintMap_010,
  ConstraintMap_011,
  ConstraintMap_012,
  ConstraintMap_013,
  ConstraintMap_014,
  ConstraintMap_015,
  ConstraintMap_016,
  ConstraintMap_017,
  ConstraintMap_018,
  ConstraintMap_019,
  ConstraintMap_020,
  /* find */find,
  ConstraintMap_022,
  ConstraintMap_023,
  /* find_opt */find_opt
];

exports.anchorToString     = anchorToString;
exports.anchorFromString   = anchorFromString;
exports.relationFromString = relationFromString;
exports.relationToString   = relationToString;
exports.ConstraintMap      = ConstraintMap;
/* include Not a pure module */
