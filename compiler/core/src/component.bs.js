// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                       = require("bs-platform/lib/js/list.js");
var Block                      = require("bs-platform/lib/js/block.js");
var Curry                      = require("bs-platform/lib/js/curry.js");
var Caml_obj                   = require("bs-platform/lib/js/caml_obj.js");
var Pervasives                 = require("bs-platform/lib/js/pervasives.js");
var LodashUpperfirst           = require("lodash.upperfirst");
var Ast$LonaCompilerCore       = require("./ast.bs.js");
var Layer$LonaCompilerCore     = require("./layer.bs.js");
var Logic$LonaCompilerCore     = require("./logic.bs.js");
var Swift$LonaCompilerCore     = require("./swift.bs.js");
var Decode$LonaCompilerCore    = require("./decode.bs.js");
var StringMap$LonaCompilerCore = require("./stringMap.bs.js");

function generate(name, json) {
  var rootLayer = Decode$LonaCompilerCore.Component[/* rootLayer */1](json);
  var logic = Logic$LonaCompilerCore.addVariableDeclarations(Decode$LonaCompilerCore.Component[/* logic */2](json));
  var assignments = Layer$LonaCompilerCore.parameterAssignmentsFromLogic(rootLayer, logic);
  var rootLayerAST = Layer$LonaCompilerCore.toJavaScriptAST(assignments, rootLayer);
  var styleSheetAST = Layer$LonaCompilerCore.toJavaScriptStyleSheetAST(rootLayer);
  var logicAST = Ast$LonaCompilerCore.JavaScript[/* optimize */3](Logic$LonaCompilerCore.toJavaScriptAST(logic));
  return Ast$LonaCompilerCore.JavaScript[/* prepareForRender */4](/* Program */Block.__(16, [/* :: */[
                  /* Class */Block.__(3, [
                      name,
                      /* Some */["React.Component"],
                      /* :: */[
                        /* Method */Block.__(4, [
                            "render",
                            /* [] */0,
                            /* :: */[
                              logicAST,
                              /* :: */[
                                /* Return */Block.__(0, [rootLayerAST]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]),
                  /* :: */[
                    styleSheetAST,
                    /* [] */0
                  ]
                ]]));
}

var JavaScript = /* module */[/* generate */generate];

function generate$1(name, json, colors) {
  var rootLayer = Decode$LonaCompilerCore.Component[/* rootLayer */1](json);
  var nonRootLayers = List.tl(Layer$LonaCompilerCore.flatten(rootLayer));
  var logic = Decode$LonaCompilerCore.Component[/* logic */2](json);
  var assignments = Layer$LonaCompilerCore.parameterAssignmentsFromLogic(rootLayer, logic);
  var parameters = Decode$LonaCompilerCore.Component[/* parameters */0](json);
  var typeAnnotationDoc = function (param) {
    if (param.tag) {
      return /* TypeName */Block.__(0, [param[0]]);
    } else {
      var typeName = param[0];
      if (typeName === "Boolean") {
        return /* TypeName */Block.__(0, ["Bool"]);
      } else {
        return /* TypeName */Block.__(0, [typeName]);
      }
    }
  };
  var parameterVariableDoc = function (parameter) {
    return /* VariableDeclaration */Block.__(6, [{
                modifiers: /* [] */0,
                pattern: /* IdentifierPattern */Block.__(0, [{
                      identifier: parameter[/* name */0],
                      annotation: /* Some */[typeAnnotationDoc(parameter[/* ltype */1])]
                    }]),
                init: /* None */0,
                block: /* Some */[/* WillSetDidSetBlock */[{
                      willSet: /* None */0,
                      didSet: /* Some */[/* :: */[
                          /* FunctionCallExpression */Block.__(13, [{
                                name: /* SwiftIdentifier */Block.__(4, ["update"]),
                                arguments: /* [] */0
                              }]),
                          /* [] */0
                        ]]
                    }]]
              }]);
  };
  var viewTypeInitDoc = function (param) {
    switch (param) {
      case 0 : 
          return /* SwiftIdentifier */Block.__(4, ["UIView"]);
      case 1 : 
          return /* SwiftIdentifier */Block.__(4, ["UILabel"]);
      case 2 : 
          return /* SwiftIdentifier */Block.__(4, ["UIImageView"]);
      case 3 : 
      case 4 : 
      case 5 : 
      case 6 : 
          return /* SwiftIdentifier */Block.__(4, ["TypeUnknown"]);
      
    }
  };
  var viewVariableDoc = function (layer) {
    var match = +(layer[/* typeName */0] === /* Text */1);
    return /* VariableDeclaration */Block.__(6, [{
                modifiers: /* :: */[
                  /* AccessLevelModifier */Block.__(0, [/* PrivateModifier */0]),
                  /* [] */0
                ],
                pattern: /* IdentifierPattern */Block.__(0, [{
                      identifier: Swift$LonaCompilerCore.Format[/* layerName */0](layer[/* name */1]),
                      annotation: /* None */0
                    }]),
                init: /* Some */[/* FunctionCallExpression */Block.__(13, [{
                        name: viewTypeInitDoc(layer[/* typeName */0]),
                        arguments: match !== 0 ? /* [] */0 : /* :: */[
                            /* FunctionCallArgument */Block.__(12, [{
                                  name: /* Some */[/* SwiftIdentifier */Block.__(4, ["frame"])],
                                  value: /* SwiftIdentifier */Block.__(4, [".zero"])
                                }]),
                            /* [] */0
                          ]
                      }])],
                block: /* None */0
              }]);
  };
  var initParameterDoc = function (parameter) {
    return /* Parameter */Block.__(11, [{
                externalName: /* None */0,
                localName: parameter[/* name */0],
                annotation: typeAnnotationDoc(parameter[/* ltype */1]),
                defaultValue: /* None */0
              }]);
  };
  var initParameterAssignmentDoc = function (parameter) {
    return /* BinaryExpression */Block.__(2, [{
                left: /* MemberExpression */Block.__(1, [/* :: */[
                      /* SwiftIdentifier */Block.__(4, ["self"]),
                      /* :: */[
                        /* SwiftIdentifier */Block.__(4, [parameter[/* name */0]]),
                        /* [] */0
                      ]
                    ]]),
                operator: "=",
                right: /* SwiftIdentifier */Block.__(4, [parameter[/* name */0]])
              }]);
  };
  var initializerCoderDoc = function () {
    return /* InitializerDeclaration */Block.__(7, [{
                modifiers: /* :: */[
                  /* RequiredModifier */10,
                  /* [] */0
                ],
                parameters: /* :: */[
                  /* Parameter */Block.__(11, [{
                        externalName: /* Some */["coder"],
                        localName: "aDecoder",
                        annotation: /* TypeName */Block.__(0, ["NSCoder"]),
                        defaultValue: /* None */0
                      }]),
                  /* [] */0
                ],
                failable: /* Some */["?"],
                body: /* :: */[
                  /* FunctionCallExpression */Block.__(13, [{
                        name: /* SwiftIdentifier */Block.__(4, ["fatalError"]),
                        arguments: /* :: */[
                          /* FunctionCallArgument */Block.__(12, [{
                                name: /* None */0,
                                value: /* SwiftIdentifier */Block.__(4, ["\"init(coder:) has not been implemented\""])
                              }]),
                          /* [] */0
                        ]
                      }]),
                  /* [] */0
                ]
              }]);
  };
  var initializerDoc = function () {
    return /* InitializerDeclaration */Block.__(7, [{
                modifiers: /* :: */[
                  /* AccessLevelModifier */Block.__(0, [/* PublicModifier */3]),
                  /* [] */0
                ],
                parameters: List.map(initParameterDoc, parameters),
                failable: /* None */0,
                body: List.concat(/* :: */[
                      List.map(initParameterAssignmentDoc, parameters),
                      /* :: */[
                        /* :: */[
                          /* Empty */0,
                          /* :: */[
                            /* MemberExpression */Block.__(1, [/* :: */[
                                  /* SwiftIdentifier */Block.__(4, ["super"]),
                                  /* :: */[
                                    /* FunctionCallExpression */Block.__(13, [{
                                          name: /* SwiftIdentifier */Block.__(4, ["init"]),
                                          arguments: /* :: */[
                                            /* FunctionCallArgument */Block.__(12, [{
                                                  name: /* Some */[/* SwiftIdentifier */Block.__(4, ["frame"])],
                                                  value: /* SwiftIdentifier */Block.__(4, [".zero"])
                                                }]),
                                            /* [] */0
                                          ]
                                        }]),
                                    /* [] */0
                                  ]
                                ]]),
                            /* :: */[
                              /* Empty */0,
                              /* :: */[
                                /* FunctionCallExpression */Block.__(13, [{
                                      name: /* SwiftIdentifier */Block.__(4, ["setUpViews"]),
                                      arguments: /* [] */0
                                    }]),
                                /* :: */[
                                  /* FunctionCallExpression */Block.__(13, [{
                                        name: /* SwiftIdentifier */Block.__(4, ["setUpConstraints"]),
                                        arguments: /* [] */0
                                      }]),
                                  /* :: */[
                                    /* FunctionCallExpression */Block.__(13, [{
                                          name: /* SwiftIdentifier */Block.__(4, ["setUpDefaults"]),
                                          arguments: /* [] */0
                                        }]),
                                    /* :: */[
                                      /* Empty */0,
                                      /* :: */[
                                        /* FunctionCallExpression */Block.__(13, [{
                                              name: /* SwiftIdentifier */Block.__(4, ["update"]),
                                              arguments: /* [] */0
                                            }]),
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ],
                        /* [] */0
                      ]
                    ])
              }]);
  };
  var memberOrSelfExpression = function (firstIdentifier, statements) {
    if (firstIdentifier === "self") {
      return /* MemberExpression */Block.__(1, [statements]);
    } else {
      return /* MemberExpression */Block.__(1, [Pervasives.$at(/* :: */[
                      /* SwiftIdentifier */Block.__(4, [firstIdentifier]),
                      /* [] */0
                    ], statements)]);
    }
  };
  var parentNameOrSelf = function (parent) {
    var match = +(parent === rootLayer);
    if (match !== 0) {
      return "self";
    } else {
      return Swift$LonaCompilerCore.Format[/* layerName */0](parent[/* name */1]);
    }
  };
  var setUpViewsDoc = function (root) {
    var addSubviews = function (parent, layer) {
      if (parent) {
        return /* :: */[
                /* FunctionCallExpression */Block.__(13, [{
                      name: memberOrSelfExpression(parentNameOrSelf(parent[0]), /* :: */[
                            /* SwiftIdentifier */Block.__(4, ["addSubview"]),
                            /* [] */0
                          ]),
                      arguments: /* :: */[
                        /* SwiftIdentifier */Block.__(4, [Swift$LonaCompilerCore.Format[/* layerName */0](layer[/* name */1])]),
                        /* [] */0
                      ]
                    }]),
                /* [] */0
              ];
      } else {
        return /* [] */0;
      }
    };
    return /* FunctionDeclaration */Block.__(8, [{
                name: "setUpViews",
                modifiers: /* :: */[
                  /* AccessLevelModifier */Block.__(0, [/* PrivateModifier */0]),
                  /* [] */0
                ],
                parameters: /* [] */0,
                body: List.concat(Layer$LonaCompilerCore.flatmapParent(addSubviews, root))
              }]);
  };
  var getConstraints = function (root) {
    var setUpContraint = function (layer, anchor1, parent, anchor2, constant) {
      var variableName = Swift$LonaCompilerCore.Format[/* layerName */0](layer[/* name */1]) + (LodashUpperfirst(anchor1) + "Constraint");
      var initialValue = /* MemberExpression */Block.__(1, [/* :: */[
            /* SwiftIdentifier */Block.__(4, [Swift$LonaCompilerCore.Format[/* layerName */0](layer[/* name */1])]),
            /* :: */[
              /* SwiftIdentifier */Block.__(4, [anchor1]),
              /* :: */[
                /* FunctionCallExpression */Block.__(13, [{
                      name: /* SwiftIdentifier */Block.__(4, ["constraint"]),
                      arguments: /* :: */[
                        /* FunctionCallArgument */Block.__(12, [{
                              name: /* Some */[/* SwiftIdentifier */Block.__(4, ["equalTo"])],
                              value: memberOrSelfExpression(parentNameOrSelf(parent), /* :: */[
                                    /* SwiftIdentifier */Block.__(4, [anchor2]),
                                    /* [] */0
                                  ])
                            }]),
                        /* :: */[
                          /* FunctionCallArgument */Block.__(12, [{
                                name: /* Some */[/* SwiftIdentifier */Block.__(4, ["constant"])],
                                value: /* LiteralExpression */Block.__(0, [/* FloatingPoint */Block.__(2, [constant])])
                              }]),
                          /* [] */0
                        ]
                      ]
                    }]),
                /* [] */0
              ]
            ]
          ]]);
      return /* record */[
              /* variableName */variableName,
              /* initialValue */initialValue
            ];
    };
    var setUpDimensionContraint = function (layer, anchor, constant) {
      var variableName = Swift$LonaCompilerCore.Format[/* layerName */0](layer[/* name */1]) + (LodashUpperfirst(anchor) + "Constraint");
      var initialValue = /* MemberExpression */Block.__(1, [/* :: */[
            /* SwiftIdentifier */Block.__(4, [Swift$LonaCompilerCore.Format[/* layerName */0](layer[/* name */1])]),
            /* :: */[
              /* SwiftIdentifier */Block.__(4, [anchor]),
              /* :: */[
                /* FunctionCallExpression */Block.__(13, [{
                      name: /* SwiftIdentifier */Block.__(4, ["constraint"]),
                      arguments: /* :: */[
                        /* FunctionCallArgument */Block.__(12, [{
                              name: /* Some */[/* SwiftIdentifier */Block.__(4, ["equalToConstant"])],
                              value: /* LiteralExpression */Block.__(0, [/* FloatingPoint */Block.__(2, [constant])])
                            }]),
                        /* [] */0
                      ]
                    }]),
                /* [] */0
              ]
            ]
          ]]);
      return /* record */[
              /* variableName */variableName,
              /* initialValue */initialValue
            ];
    };
    var constrainAxes = function (parent) {
      var direction = Layer$LonaCompilerCore.getFlexDirection(parent);
      var match = +(direction === "column");
      var primaryBeforeAnchor = match !== 0 ? "topAnchor" : "leadingAnchor";
      var match$1 = +(direction === "column");
      var primaryAfterAnchor = match$1 !== 0 ? "bottomAnchor" : "trailingAnchor";
      var match$2 = +(direction === "column");
      var secondaryBeforeAnchor = match$2 !== 0 ? "leadingAnchor" : "topAnchor";
      var match$3 = +(direction === "column");
      var secondaryAfterAnchor = match$3 !== 0 ? "trailingAnchor" : "bottomAnchor";
      var parentPadding = Layer$LonaCompilerCore.getPadding(parent);
      var addConstraints = function (index, layer) {
        var height = Layer$LonaCompilerCore.getNumberParameterOpt("height", layer);
        var width = Layer$LonaCompilerCore.getNumberParameterOpt("width", layer);
        var layerMargin = Layer$LonaCompilerCore.getMargin(layer);
        var firstViewConstraints;
        if (index !== 0) {
          firstViewConstraints = /* [] */0;
        } else {
          var match = +(direction === "column");
          var primaryBeforeConstant = match !== 0 ? parentPadding[/* top */0] + layerMargin[/* top */0] : parentPadding[/* left */3] + layerMargin[/* left */3];
          firstViewConstraints = /* :: */[
            setUpContraint(layer, primaryBeforeAnchor, parent, primaryBeforeAnchor, primaryBeforeConstant),
            /* [] */0
          ];
        }
        var lastViewConstraints;
        if (index === (List.length(parent[/* children */3]) - 1 | 0)) {
          var match$1 = +(direction === "column");
          var primaryAfterConstant = match$1 !== 0 ? parentPadding[/* bottom */2] + layerMargin[/* bottom */2] : parentPadding[/* right */1] + layerMargin[/* right */1];
          lastViewConstraints = /* :: */[
            setUpContraint(layer, primaryAfterAnchor, parent, primaryAfterAnchor, -primaryAfterConstant),
            /* [] */0
          ];
        } else {
          lastViewConstraints = /* [] */0;
        }
        var middleViewConstraints;
        if (index !== 0) {
          var previousLayer = List.nth(parent[/* children */3], index - 1 | 0);
          var previousMargin = Layer$LonaCompilerCore.getMargin(previousLayer);
          var match$2 = +(direction === "column");
          var betweenConstant = match$2 !== 0 ? previousMargin[/* bottom */2] + layerMargin[/* top */0] : previousMargin[/* right */1] + layerMargin[/* left */3];
          middleViewConstraints = /* :: */[
            setUpContraint(layer, primaryBeforeAnchor, previousLayer, primaryAfterAnchor, betweenConstant),
            /* [] */0
          ];
        } else {
          middleViewConstraints = /* [] */0;
        }
        var match$3 = +(direction === "column");
        var secondaryBeforeConstant = match$3 !== 0 ? parentPadding[/* left */3] + layerMargin[/* left */3] : parentPadding[/* top */0] + layerMargin[/* top */0];
        var match$4 = +(direction === "column");
        var secondaryAfterConstant = match$4 !== 0 ? parentPadding[/* right */1] + layerMargin[/* right */1] : parentPadding[/* bottom */2] + layerMargin[/* bottom */2];
        var secondaryAxisConstraints_000 = setUpContraint(layer, secondaryBeforeAnchor, parent, secondaryBeforeAnchor, secondaryBeforeConstant);
        var secondaryAxisConstraints_001 = /* :: */[
          setUpContraint(layer, secondaryAfterAnchor, parent, secondaryAfterAnchor, -secondaryAfterConstant),
          /* [] */0
        ];
        var secondaryAxisConstraints = /* :: */[
          secondaryAxisConstraints_000,
          secondaryAxisConstraints_001
        ];
        var heightConstraint = height ? /* :: */[
            setUpDimensionContraint(layer, "heightAnchor", height[0]),
            /* [] */0
          ] : /* [] */0;
        var widthConstraint = width ? /* :: */[
            setUpDimensionContraint(layer, "widthAnchor", width[0]),
            /* [] */0
          ] : /* [] */0;
        return Pervasives.$at(firstViewConstraints, Pervasives.$at(lastViewConstraints, Pervasives.$at(middleViewConstraints, Pervasives.$at(secondaryAxisConstraints, Pervasives.$at(heightConstraint, widthConstraint)))));
      };
      return List.concat(List.mapi(addConstraints, parent[/* children */3]));
    };
    return List.concat(Layer$LonaCompilerCore.flatmap(constrainAxes, root));
  };
  var constraints = getConstraints(rootLayer);
  var setUpConstraintsDoc = function (root) {
    var translatesAutoresizingMask = function (layer) {
      return /* BinaryExpression */Block.__(2, [{
                  left: memberOrSelfExpression(parentNameOrSelf(layer), /* :: */[
                        /* SwiftIdentifier */Block.__(4, ["translatesAutoresizingMaskIntoConstraints"]),
                        /* [] */0
                      ]),
                  operator: "=",
                  right: /* LiteralExpression */Block.__(0, [/* Boolean */Block.__(0, [/* false */0])])
                }]);
    };
    var defineConstraint = function (def) {
      return /* ConstantDeclaration */Block.__(5, [{
                  modifiers: /* [] */0,
                  init: /* Some */[def[/* initialValue */1]],
                  pattern: /* IdentifierPattern */Block.__(0, [{
                        identifier: def[/* variableName */0],
                        annotation: /* None */0
                      }])
                }]);
    };
    var activateConstraints = function () {
      return /* FunctionCallExpression */Block.__(13, [{
                  name: /* MemberExpression */Block.__(1, [/* :: */[
                        /* SwiftIdentifier */Block.__(4, ["NSLayoutConstraint"]),
                        /* :: */[
                          /* SwiftIdentifier */Block.__(4, ["activate"]),
                          /* [] */0
                        ]
                      ]]),
                  arguments: /* :: */[
                    /* FunctionCallArgument */Block.__(12, [{
                          name: /* None */0,
                          value: /* LiteralExpression */Block.__(0, [/* Array */Block.__(5, [List.map((function (def) {
                                          return /* SwiftIdentifier */Block.__(4, [def[/* variableName */0]]);
                                        }), constraints)])])
                        }]),
                    /* [] */0
                  ]
                }]);
    };
    var assignConstraint = function (def) {
      return /* BinaryExpression */Block.__(2, [{
                  left: /* MemberExpression */Block.__(1, [/* :: */[
                        /* SwiftIdentifier */Block.__(4, ["self"]),
                        /* :: */[
                          /* SwiftIdentifier */Block.__(4, [def[/* variableName */0]]),
                          /* [] */0
                        ]
                      ]]),
                  operator: "=",
                  right: /* SwiftIdentifier */Block.__(4, [def[/* variableName */0]])
                }]);
    };
    return /* FunctionDeclaration */Block.__(8, [{
                name: "setUpConstraints",
                modifiers: /* :: */[
                  /* AccessLevelModifier */Block.__(0, [/* PrivateModifier */0]),
                  /* [] */0
                ],
                parameters: /* [] */0,
                body: List.concat(/* :: */[
                      Layer$LonaCompilerCore.flatmap(translatesAutoresizingMask, root),
                      /* :: */[
                        /* :: */[
                          /* Empty */0,
                          /* [] */0
                        ],
                        /* :: */[
                          List.map(defineConstraint, constraints),
                          /* :: */[
                            /* :: */[
                              /* Empty */0,
                              /* [] */0
                            ],
                            /* :: */[
                              /* :: */[
                                activateConstraints(/* () */0),
                                /* [] */0
                              ],
                              /* :: */[
                                /* :: */[
                                  /* Empty */0,
                                  /* [] */0
                                ],
                                /* :: */[
                                  List.map(assignConstraint, constraints),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ])
              }]);
  };
  var initialLayerValue = function (layer, name) {
    var match = StringMap$LonaCompilerCore.find_opt(name, layer[/* parameters */2]);
    if (match) {
      return Swift$LonaCompilerCore.Document[/* lonaValue */2](colors, match[0]);
    } else {
      return /* LiteralExpression */Block.__(0, [/* Integer */Block.__(1, [0])]);
    }
  };
  var defineInitialLayerValue = function (layer, param) {
    var name = param[0];
    var match = initialLayerValue(layer, name);
    var match$1;
    if (name === "visible") {
      if (typeof match === "number") {
        match$1 = [
          name,
          match
        ];
      } else if (match.tag) {
        match$1 = [
          name,
          match
        ];
      } else {
        var match$2 = match[0];
        match$1 = typeof match$2 === "number" ? [
            name,
            match
          ] : (
            match$2.tag ? [
                name,
                match
              ] : /* tuple */[
                "isHidden",
                /* LiteralExpression */Block.__(0, [/* Boolean */Block.__(0, [1 - match$2[0]])])
              ]
          );
      }
    } else {
      match$1 = [
        name,
        match
      ];
    }
    return /* BinaryExpression */Block.__(2, [{
                left: memberOrSelfExpression(parentNameOrSelf(layer), /* :: */[
                      /* SwiftIdentifier */Block.__(4, [match$1[0]]),
                      /* [] */0
                    ]),
                operator: "=",
                right: match$1[1]
              }]);
  };
  var setUpDefaultsDoc = function () {
    var filterParameters = function (param) {
      var name = param[0];
      if (name !== "image" && name !== "textStyle" && name !== "flexDirection" && name !== "justifyContent" && name !== "alignSelf" && name !== "alignItems" && name !== "flex" && name !== "font" && !name.startsWith("padding") && !name.startsWith("margin") && name !== "height") {
        return +(name !== "width");
      } else {
        return /* false */0;
      }
    };
    var defineInitialLayerValues = function (layer) {
      return List.map((function (param) {
                    return defineInitialLayerValue(layer, /* tuple */[
                                param[0],
                                param[1]
                              ]);
                  }), List.filter((function (param) {
                          var layer$1 = layer;
                          var param$1 = param;
                          var match = Layer$LonaCompilerCore.LayerMap[/* find_opt */24](layer$1, assignments);
                          if (match) {
                            var match$1 = StringMap$LonaCompilerCore.find_opt(param$1[0], match[0]);
                            if (match$1) {
                              return /* false */0;
                            } else {
                              return /* true */1;
                            }
                          } else {
                            return /* true */1;
                          }
                        }))(List.filter(filterParameters)(Curry._1(StringMap$LonaCompilerCore.bindings, layer[/* parameters */2]))));
    };
    return /* FunctionDeclaration */Block.__(8, [{
                name: "setUpDefaults",
                modifiers: /* :: */[
                  /* AccessLevelModifier */Block.__(0, [/* PrivateModifier */0]),
                  /* [] */0
                ],
                parameters: /* [] */0,
                body: Swift$LonaCompilerCore.Document[/* joinGroups */1](/* Empty */0, List.map(defineInitialLayerValues, Layer$LonaCompilerCore.flatten(rootLayer)))
              }]);
  };
  var updateDoc = function () {
    var filterParameters = function (param) {
      var name = param[0];
      if (name !== "image") {
        return +(name !== "textStyle");
      } else {
        return /* false */0;
      }
    };
    var conditionallyAssigned = Logic$LonaCompilerCore.conditionallyAssignedIdentifiers(logic);
    var defineInitialLayerValues = function (param) {
      var layer = param[0];
      return List.map((function (param) {
                    return defineInitialLayerValue(layer, param);
                  }), List.filter((function (param) {
                          var layer$1 = layer;
                          var param$1 = param;
                          var name = param$1[0];
                          var isAssigned = function (param) {
                            return Caml_obj.caml_equal(param[1], /* :: */[
                                        "layers",
                                        /* :: */[
                                          layer$1[/* name */1],
                                          /* :: */[
                                            name,
                                            /* [] */0
                                          ]
                                        ]
                                      ]);
                          };
                          return Curry._2(Logic$LonaCompilerCore.IdentifierSet[/* exists */15], isAssigned, conditionallyAssigned);
                        }))(List.filter(filterParameters)(Curry._1(StringMap$LonaCompilerCore.bindings, param[1]))));
    };
    return /* FunctionDeclaration */Block.__(8, [{
                name: "update",
                modifiers: /* :: */[
                  /* AccessLevelModifier */Block.__(0, [/* PrivateModifier */0]),
                  /* [] */0
                ],
                parameters: /* [] */0,
                body: Swift$LonaCompilerCore.Document[/* joinGroups */1](/* Empty */0, /* :: */[
                      List.concat(List.map(defineInitialLayerValues, Curry._1(Layer$LonaCompilerCore.LayerMap[/* bindings */16], assignments))),
                      /* :: */[
                        Logic$LonaCompilerCore.toSwiftAST(colors, rootLayer, logic),
                        /* [] */0
                      ]
                    ])
              }]);
  };
  return /* TopLevelDeclaration */Block.__(18, [{
              statements: /* :: */[
                /* ImportDeclaration */Block.__(9, ["UIKit"]),
                /* :: */[
                  /* ImportDeclaration */Block.__(9, ["Foundation"]),
                  /* :: */[
                    /* LineComment */Block.__(14, ["MARK: - " + name]),
                    /* :: */[
                      /* Empty */0,
                      /* :: */[
                        /* ClassDeclaration */Block.__(3, [{
                              name: name,
                              inherits: /* :: */[
                                /* TypeName */Block.__(0, ["UIView"]),
                                /* [] */0
                              ],
                              modifier: /* None */0,
                              isFinal: /* false */0,
                              body: List.concat(/* :: */[
                                    /* :: */[
                                      /* LineComment */Block.__(14, ["MARK: Lifecycle"]),
                                      /* [] */0
                                    ],
                                    /* :: */[
                                      /* :: */[
                                        /* Empty */0,
                                        /* [] */0
                                      ],
                                      /* :: */[
                                        /* :: */[
                                          initializerDoc(/* () */0),
                                          /* [] */0
                                        ],
                                        /* :: */[
                                          /* :: */[
                                            /* Empty */0,
                                            /* [] */0
                                          ],
                                          /* :: */[
                                            /* :: */[
                                              initializerCoderDoc(/* () */0),
                                              /* [] */0
                                            ],
                                            /* :: */[
                                              /* :: */[
                                                /* LineComment */Block.__(14, ["MARK: Public"]),
                                                /* [] */0
                                              ],
                                              /* :: */[
                                                /* :: */[
                                                  /* Empty */0,
                                                  /* [] */0
                                                ],
                                                /* :: */[
                                                  List.map(parameterVariableDoc, parameters),
                                                  /* :: */[
                                                    /* :: */[
                                                      /* LineComment */Block.__(14, ["MARK: Private"]),
                                                      /* [] */0
                                                    ],
                                                    /* :: */[
                                                      /* :: */[
                                                        /* Empty */0,
                                                        /* [] */0
                                                      ],
                                                      /* :: */[
                                                        List.map(viewVariableDoc, nonRootLayers),
                                                        /* :: */[
                                                          /* :: */[
                                                            /* Empty */0,
                                                            /* [] */0
                                                          ],
                                                          /* :: */[
                                                            List.map((function (def) {
                                                                    var variableName = def[/* variableName */0];
                                                                    return /* VariableDeclaration */Block.__(6, [{
                                                                                modifiers: /* :: */[
                                                                                  /* AccessLevelModifier */Block.__(0, [/* PrivateModifier */0]),
                                                                                  /* [] */0
                                                                                ],
                                                                                pattern: /* IdentifierPattern */Block.__(0, [{
                                                                                      identifier: variableName,
                                                                                      annotation: /* Some */[/* OptionalType */Block.__(4, [/* TypeName */Block.__(0, ["NSLayoutConstraint"])])]
                                                                                    }]),
                                                                                init: /* None */0,
                                                                                block: /* None */0
                                                                              }]);
                                                                  }), constraints),
                                                            /* :: */[
                                                              /* :: */[
                                                                /* Empty */0,
                                                                /* [] */0
                                                              ],
                                                              /* :: */[
                                                                /* :: */[
                                                                  setUpViewsDoc(rootLayer),
                                                                  /* [] */0
                                                                ],
                                                                /* :: */[
                                                                  /* :: */[
                                                                    /* Empty */0,
                                                                    /* [] */0
                                                                  ],
                                                                  /* :: */[
                                                                    /* :: */[
                                                                      setUpConstraintsDoc(rootLayer),
                                                                      /* [] */0
                                                                    ],
                                                                    /* :: */[
                                                                      /* :: */[
                                                                        /* Empty */0,
                                                                        /* [] */0
                                                                      ],
                                                                      /* :: */[
                                                                        /* :: */[
                                                                          setUpDefaultsDoc(/* () */0),
                                                                          /* [] */0
                                                                        ],
                                                                        /* :: */[
                                                                          /* :: */[
                                                                            /* Empty */0,
                                                                            /* [] */0
                                                                          ],
                                                                          /* :: */[
                                                                            /* :: */[
                                                                              updateDoc(/* () */0),
                                                                              /* [] */0
                                                                            ],
                                                                            /* [] */0
                                                                          ]
                                                                        ]
                                                                      ]
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ]
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ])
                            }]),
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            }]);
}

var Swift = /* module */[/* generate */generate$1];

exports.JavaScript = JavaScript;
exports.Swift      = Swift;
/* lodash.upperfirst Not a pure module */
