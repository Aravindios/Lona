// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                    = require("bs-platform/lib/js/list.js");
var Block                   = require("bs-platform/lib/js/block.js");
var Ast$LonaCompilerCore    = require("./ast.bs.js");
var Layer$LonaCompilerCore  = require("./layer.bs.js");
var Logic$LonaCompilerCore  = require("./logic.bs.js");
var Decode$LonaCompilerCore = require("./decode.bs.js");

function generate(name, json) {
  var rootLayer = Decode$LonaCompilerCore.Component[/* rootLayer */1](json);
  var logic = Logic$LonaCompilerCore.addVariableDeclarations(Decode$LonaCompilerCore.Component[/* logic */2](json));
  var assignments = Layer$LonaCompilerCore.parameterAssignments(rootLayer, logic);
  var rootLayerAST = Layer$LonaCompilerCore.toJavaScriptAST(assignments, rootLayer);
  var styleSheetAST = Layer$LonaCompilerCore.toJavaScriptStyleSheetAST(rootLayer);
  var logicAST = Ast$LonaCompilerCore.JavaScript[/* optimize */3](Logic$LonaCompilerCore.toJavaScriptAST(logic));
  return Ast$LonaCompilerCore.JavaScript[/* prepareForRender */4](/* Program */Block.__(16, [/* :: */[
                  /* Class */Block.__(3, [
                      name,
                      /* Some */["React.Component"],
                      /* :: */[
                        /* Method */Block.__(4, [
                            "render",
                            /* [] */0,
                            /* :: */[
                              logicAST,
                              /* :: */[
                                /* Return */Block.__(0, [rootLayerAST]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]),
                  /* :: */[
                    styleSheetAST,
                    /* [] */0
                  ]
                ]]));
}

var JavaScript = /* module */[/* generate */generate];

function generate$1(name, json) {
  var parameters = Decode$LonaCompilerCore.Component[/* parameters */0](json);
  var typeAnnotationDoc = function (param) {
    if (param.tag) {
      return /* TypeName */Block.__(0, [param[0]]);
    } else {
      var typeName = param[0];
      if (typeName === "Boolean") {
        return /* TypeName */Block.__(0, ["Bool"]);
      } else {
        return /* TypeName */Block.__(0, [typeName]);
      }
    }
  };
  var parameterVariableDoc = function (parameter) {
    return /* VariableDeclaration */Block.__(4, [{
                modifiers: /* [] */0,
                pattern: /* IdentifierPattern */Block.__(0, [{
                      identifier: parameter[/* name */0],
                      annotation: /* Some */[typeAnnotationDoc(parameter[/* ltype */1])]
                    }]),
                init: /* None */0,
                block: /* Some */[/* WillSetDidSetBlock */[{
                      willSet: /* None */0,
                      didSet: /* Some */[/* :: */[
                          /* FunctionCallExpression */Block.__(7, [{
                                name: /* SwiftIdentifier */Block.__(2, ["update"]),
                                arguments: /* [] */0
                              }]),
                          /* [] */0
                        ]]
                    }]]
              }]);
  };
  return /* TopLevelDeclaration */Block.__(10, [{
              statements: /* :: */[
                /* ImportDeclaration */Block.__(5, ["UIKit"]),
                /* :: */[
                  /* ImportDeclaration */Block.__(5, ["Foundation"]),
                  /* :: */[
                    /* ClassDeclaration */Block.__(1, [{
                          name: name,
                          inherits: /* :: */[
                            /* TypeName */Block.__(0, ["UIView"]),
                            /* [] */0
                          ],
                          modifier: /* None */0,
                          isFinal: /* false */0,
                          body: List.map(parameterVariableDoc, parameters)
                        }]),
                    /* [] */0
                  ]
                ]
              ]
            }]);
}

var Swift = /* module */[/* generate */generate$1];

exports.JavaScript = JavaScript;
exports.Swift      = Swift;
/* Layer-LonaCompilerCore Not a pure module */
