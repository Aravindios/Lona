// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                       = require("bs-platform/lib/js/list.js");
var Block                      = require("bs-platform/lib/js/block.js");
var Curry                      = require("bs-platform/lib/js/curry.js");
var Caml_obj                   = require("bs-platform/lib/js/caml_obj.js");
var Prettier                   = require("prettier");
var Pervasives                 = require("bs-platform/lib/js/pervasives.js");
var Json_decode                = require("bs-json/src/Json_decode.js");
var LodashCamelcase            = require("lodash.camelcase");
var LodashUpperfirst           = require("lodash.upperfirst");
var Css$LonaCompilerCore       = require("./css.bs.js");
var Color$LonaCompilerCore     = require("./color.bs.js");
var Layer$LonaCompilerCore     = require("./layer.bs.js");
var Logic$LonaCompilerCore     = require("./logic.bs.js");
var Decode$LonaCompilerCore    = require("./decode.bs.js");
var Render$LonaCompilerCore    = require("./render.bs.js");
var Prettier$LonaCompilerCore  = require("./prettier.bs.js");
var StringMap$LonaCompilerCore = require("./stringMap.bs.js");

function layerName(layerName$1) {
  return LodashCamelcase(layerName$1) + "View";
}

var Format = /* module */[/* layerName */layerName];

var Ast = /* module */[];

function join(sep, nodes) {
  if (nodes) {
    return List.fold_left((function (acc, node) {
                  return Pervasives.$at(acc, /* :: */[
                              sep,
                              /* :: */[
                                node,
                                /* [] */0
                              ]
                            ]);
                }), /* [] */0, nodes);
  } else {
    return /* [] */0;
  }
}

function joinGroups(sep, groups) {
  var nonEmpty = List.filter((function (x) {
            return +(List.length(x) > 0);
          }))(groups);
  if (nonEmpty) {
    return List.fold_left((function (acc, nodes) {
                  return Pervasives.$at(acc, Pervasives.$at(/* :: */[
                                  sep,
                                  /* [] */0
                                ], nodes));
                }), nonEmpty[0], nonEmpty[1]);
  } else {
    return /* [] */0;
  }
}

function lonaValue(colors, value) {
  var match = value[/* ltype */0];
  if (match.tag) {
    var alias = match[0];
    if (alias === "Color") {
      var rawValue = Json_decode.string(value[/* data */1]);
      var match$1 = Color$LonaCompilerCore.find(colors, rawValue);
      if (match$1) {
        return /* MemberExpression */Block.__(1, [/* :: */[
                    /* SwiftIdentifier */Block.__(5, ["Colors"]),
                    /* :: */[
                      /* SwiftIdentifier */Block.__(5, [match$1[0][/* id */0]]),
                      /* [] */0
                    ]
                  ]]);
      } else {
        return /* LiteralExpression */Block.__(0, [/* Color */Block.__(4, [rawValue])]);
      }
    } else {
      return /* SwiftIdentifier */Block.__(5, ["UnknownNamedTypeAlias" + alias]);
    }
  } else {
    var typeName = match[0];
    switch (typeName) {
      case "Boolean" : 
          return /* LiteralExpression */Block.__(0, [/* Boolean */Block.__(0, [Json_decode.bool(value[/* data */1])])]);
      case "Number" : 
          return /* LiteralExpression */Block.__(0, [/* FloatingPoint */Block.__(2, [Json_decode.$$float(value[/* data */1])])]);
      case "String" : 
          return /* LiteralExpression */Block.__(0, [/* String */Block.__(3, [Json_decode.string(value[/* data */1])])]);
      default:
        return /* SwiftIdentifier */Block.__(5, ["UnknownReferenceType: " + typeName]);
    }
  }
}

var Document = /* module */[
  /* join */join,
  /* joinGroups */joinGroups,
  /* lonaValue */lonaValue
];

function renderFloat(value) {
  var string = Pervasives.string_of_float(value);
  var match = +string.endsWith(".");
  return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], match !== 0 ? string.slice(0, -1) : string);
}

function renderAccessLevelModifier(node) {
  switch (node) {
    case 0 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "private");
    case 1 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "fileprivate");
    case 2 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "internal");
    case 3 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "public");
    case 4 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "open");
    
  }
}

function renderMutationModifier(node) {
  if (node !== 0) {
    return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "nonmutating");
  } else {
    return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "mutating");
  }
}

function renderDeclarationModifier(node) {
  if (typeof node === "number") {
    switch (node) {
      case 0 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "class");
      case 1 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "convenience");
      case 2 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "dynamic");
      case 3 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "final");
      case 4 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "infix");
      case 5 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "lazy");
      case 6 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "optional");
      case 7 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "override");
      case 8 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "postfix");
      case 9 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "prefix");
      case 10 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "required");
      case 11 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "static");
      case 12 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "unowned");
      case 13 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "unownedsafe");
      case 14 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "unownedunsafe");
      case 15 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "weak");
      
    }
  } else if (node.tag) {
    return renderMutationModifier(node[0]);
  } else {
    return renderAccessLevelModifier(node[0]);
  }
}

function render(ast) {
  if (typeof ast === "number") {
    return Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1];
  } else {
    switch (ast.tag | 0) {
      case 0 : 
          return renderLiteral(ast[0]);
      case 1 : 
          return Prettier.doc.builders.group(Prettier.doc.builders.indent(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                                  Prettier.doc.builders.softline,
                                  /* :: */[
                                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "."),
                                    /* [] */0
                                  ]
                                ]), List.map(render, ast[0]))));
      case 2 : 
          var o = ast[0];
          return Prettier.doc.builders.group(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], render(o.left), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " ")), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o.operator)), Prettier.doc.builders.line), render(o.right)));
      case 3 : 
          var o$1 = ast[0];
          return Prettier.doc.builders.group(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o$1.operator), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "(")), Prettier.doc.builders.softline), render(o$1.expression)), Prettier.doc.builders.softline), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")")));
      case 4 : 
          var o$2 = ast[0];
          var match = o$2.isFinal;
          var maybeFinal = match !== 0 ? Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "final"), Prettier.doc.builders.line) : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1];
          var match$1 = +(o$2.modifier !== /* None */0);
          var maybeModifier = match$1 !== 0 ? Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                  Render$LonaCompilerCore.renderOptional(renderAccessLevelModifier, o$2.modifier),
                  /* :: */[
                    Prettier.doc.builders.line,
                    /* [] */0
                  ]
                ]) : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1];
          var typeAnnotations = o$2.inherits;
          var maybeInherits = typeAnnotations ? Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ": "), Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ", "), List.map(renderTypeAnnotation, typeAnnotations))) : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1];
          var opening = Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                    maybeModifier,
                    /* :: */[
                      maybeFinal,
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "class"),
                        /* :: */[
                          Prettier.doc.builders.line,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o$2.name),
                            /* :: */[
                              maybeInherits,
                              /* :: */[
                                Prettier.doc.builders.line,
                                /* :: */[
                                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]));
          var closing = Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                Prettier.doc.builders.hardline,
                /* :: */[
                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"),
                  /* [] */0
                ]
              ]);
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      opening,
                      /* :: */[
                        Prettier.doc.builders.indent(Render$LonaCompilerCore.prefixAll(Prettier.doc.builders.hardline, List.map(render, o$2.body))),
                        /* :: */[
                          closing,
                          /* [] */0
                        ]
                      ]
                    ]);
      case 5 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ast[0]);
      case 6 : 
          var o$3 = ast[0];
          var modifiers = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " "), List.map(renderDeclarationModifier, o$3.modifiers));
          var match$2 = +(o$3.init === /* None */0);
          var maybeInit = match$2 !== 0 ? Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1] : Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " = "),
                  /* :: */[
                    Render$LonaCompilerCore.renderOptional(render, o$3.init),
                    /* [] */0
                  ]
                ]);
          var match$3 = +(List.length(o$3.modifiers) > 0);
          var parts_001 = /* :: */[
            match$3 !== 0 ? Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " ") : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1],
            /* :: */[
              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "let "),
              /* :: */[
                renderPattern(o$3.pattern),
                /* :: */[
                  maybeInit,
                  /* [] */0
                ]
              ]
            ]
          ];
          var parts = /* :: */[
            modifiers,
            parts_001
          ];
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], parts));
      case 7 : 
          var o$4 = ast[0];
          var modifiers$1 = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " "), List.map(renderDeclarationModifier, o$4.modifiers));
          var match$4 = +(o$4.init === /* None */0);
          var maybeInit$1 = match$4 !== 0 ? Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1] : Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " = "),
                  /* :: */[
                    Render$LonaCompilerCore.renderOptional(render, o$4.init),
                    /* [] */0
                  ]
                ]);
          var maybeBlock = Render$LonaCompilerCore.renderOptional((function (block) {
                  return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Prettier.doc.builders.line, renderInitializerBlock(block));
                }), o$4.block);
          var match$5 = +(List.length(o$4.modifiers) > 0);
          var parts_001$1 = /* :: */[
            match$5 !== 0 ? Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " ") : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1],
            /* :: */[
              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "var "),
              /* :: */[
                renderPattern(o$4.pattern),
                /* :: */[
                  maybeInit$1,
                  /* :: */[
                    maybeBlock,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ];
          var parts$1 = /* :: */[
            modifiers$1,
            parts_001$1
          ];
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], parts$1));
      case 8 : 
          var o$5 = ast[0];
          var match$6 = +(List.length(o$5.modifiers) > 0);
          var parts_000 = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " "), List.map(renderDeclarationModifier, o$5.modifiers));
          var parts_001$2 = /* :: */[
            match$6 !== 0 ? Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " ") : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1],
            /* :: */[
              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "init"),
              /* :: */[
                Render$LonaCompilerCore.renderOptional(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o$5.failable),
                /* :: */[
                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                  /* :: */[
                    Prettier.doc.builders.indent(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Prettier.doc.builders.softline, Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ","), Prettier.doc.builders.line), List.map(render, o$5.parameters)))),
                    /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                      /* :: */[
                        Prettier.doc.builders.line,
                        /* :: */[
                          render(/* CodeBlock */Block.__(17, [{
                                    statements: o$5.body
                                  }])),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ];
          var parts$2 = /* :: */[
            parts_000,
            parts_001$2
          ];
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], parts$2));
      case 9 : 
          var o$6 = ast[0];
          var match$7 = +(List.length(o$6.modifiers) > 0);
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                                    Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " "), List.map(renderDeclarationModifier, o$6.modifiers)),
                                    /* :: */[
                                      match$7 !== 0 ? Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " ") : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1],
                                      /* :: */[
                                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "func "),
                                        /* :: */[
                                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o$6.name),
                                          /* :: */[
                                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                                            /* :: */[
                                              Prettier.doc.builders.indent(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Prettier.doc.builders.softline, Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ","), Prettier.doc.builders.line), List.map(render, o$6.parameters)))),
                                              /* :: */[
                                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ])),
                          /* :: */[
                            Prettier.doc.builders.line,
                            /* :: */[
                              render(/* CodeBlock */Block.__(17, [{
                                        statements: o$6.body
                                      }])),
                              /* [] */0
                            ]
                          ]
                        ]));
      case 10 : 
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "import"),
                          /* :: */[
                            Prettier.doc.builders.line,
                            /* :: */[
                              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ast[0]),
                              /* [] */0
                            ]
                          ]
                        ]));
      case 11 : 
          var o$7 = ast[0];
          return Prettier.doc.builders.group(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Prettier.doc.builders.hardline, Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "if")), Prettier.doc.builders.line), render(o$7.condition)), Prettier.doc.builders.line), render(/* CodeBlock */Block.__(17, [{
                                  statements: o$7.block
                                }]))));
      case 12 : 
          var o$8 = ast[0];
          return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Render$LonaCompilerCore.renderOptional((function (name) {
                                        return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], name), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " "));
                                      }), o$8.externalName), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o$8.localName)), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ": ")), renderTypeAnnotation(o$8.annotation)), Render$LonaCompilerCore.renderOptional((function (node) {
                            return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " = "), render(node));
                          }), o$8.defaultValue));
      case 13 : 
          var o$9 = ast[0];
          var match$8 = o$9.name;
          if (match$8) {
            return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                            render(match$8[0]),
                            /* :: */[
                              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ":"),
                              /* :: */[
                                Prettier.doc.builders.line,
                                /* :: */[
                                  render(o$9.value),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]));
          } else {
            return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                            render(o$9.value),
                            /* [] */0
                          ]));
          }
      case 14 : 
          var o$10 = ast[0];
          var match$9 = o$10.arguments;
          var endsWithLiteral;
          if (match$9) {
            var match$10 = match$9[0];
            if (typeof match$10 === "number") {
              endsWithLiteral = /* true */1;
            } else if (match$10.tag === 13) {
              if (match$9[1]) {
                endsWithLiteral = /* true */1;
              } else {
                var match$11 = match$10[0].value;
                endsWithLiteral = typeof match$11 === "number" || match$11.tag ? /* true */1 : /* false */0;
              }
            } else {
              endsWithLiteral = /* true */1;
            }
          } else {
            endsWithLiteral = /* true */1;
          }
          var $$arguments = Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                endsWithLiteral !== 0 ? Prettier.doc.builders.softline : Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1],
                /* :: */[
                  Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ","),
                            /* :: */[
                              Prettier.doc.builders.line,
                              /* [] */0
                            ]
                          ]), List.map(render, o$10.arguments)),
                  /* [] */0
                ]
              ]);
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          render(o$10.name),
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                            /* :: */[
                              endsWithLiteral !== 0 ? Prettier.doc.builders.indent($$arguments) : $$arguments,
                              /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]));
      case 15 : 
          return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Prettier.doc.builders.hardline, Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "// " + ast[0]));
      case 16 : 
          var o$11 = ast[0];
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      render(o$11.line),
                      /* :: */[
                        Prettier.doc.builders.lineSuffix(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " // " + o$11.comment)),
                        /* [] */0
                      ]
                    ]);
      case 17 : 
          var statements = ast[0].statements;
          if (statements) {
            return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"), Prettier.doc.builders.indent(Render$LonaCompilerCore.prefixAll(Prettier.doc.builders.hardline, List.map(render, statements)))), Prettier.doc.builders.hardline), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"));
          } else {
            return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{}");
          }
      case 18 : 
          return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Prettier.doc.builders.hardline, List.map(render, ast[0])), Prettier.doc.builders.lineSuffix(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " // StatementListHelper")));
      case 19 : 
          return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Prettier.doc.builders.hardline,
                          /* [] */0
                        ]), List.map(render, ast[0].statements));
      
    }
  }
}

function renderLiteral(node) {
  if (typeof node === "number") {
    return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "nil");
  } else {
    switch (node.tag | 0) {
      case 0 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], node[0] !== 0 ? "true" : "false");
      case 1 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], Pervasives.string_of_int(node[0]));
      case 2 : 
          return renderFloat(node[0]);
      case 3 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "\""),
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], node[0]),
                        /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "\""),
                          /* [] */0
                        ]
                      ]
                    ]);
      case 4 : 
          var rgba = Css$LonaCompilerCore.parseColorDefault("black", node[0]);
          var values_000 = Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "red: "),
                /* :: */[
                  renderFloat(rgba[/* r */0] / 255.0),
                  /* [] */0
                ]
              ]);
          var values_001 = /* :: */[
            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                  Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "green: "),
                  /* :: */[
                    renderFloat(rgba[/* g */1] / 255.0),
                    /* [] */0
                  ]
                ]),
            /* :: */[
              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "blue: "),
                    /* :: */[
                      renderFloat(rgba[/* b */2] / 255.0),
                      /* [] */0
                    ]
                  ]),
              /* :: */[
                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "alpha: "),
                      /* :: */[
                        renderFloat(rgba[/* a */3]),
                        /* [] */0
                      ]
                    ]),
                /* [] */0
              ]
            ]
          ];
          var values = /* :: */[
            values_000,
            values_001
          ];
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "#colorLiteral("),
                      /* :: */[
                        Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ", "), values),
                        /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                          /* [] */0
                        ]
                      ]
                    ]);
      case 5 : 
          var body = node[0];
          var match = +(List.length(body) > 0);
          var maybeLine = match !== 0 ? Prettier.doc.builders.line : Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "");
          var body$1 = Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ","),
                    /* :: */[
                      Prettier.doc.builders.line,
                      /* [] */0
                    ]
                  ]), List.map(render, body));
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "["),
                          /* :: */[
                            Prettier.doc.builders.indent(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                                      maybeLine,
                                      /* :: */[
                                        body$1,
                                        /* [] */0
                                      ]
                                    ])),
                            /* :: */[
                              maybeLine,
                              /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "]"),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]));
      
    }
  }
}

function renderTypeAnnotation(node) {
  switch (node.tag | 0) {
    case 0 : 
        return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], node[0]);
    case 1 : 
        var o = node[0];
        return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                        renderTypeAnnotation(o.name),
                        /* :: */[
                          Prettier.doc.builders.line,
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "."),
                            /* :: */[
                              Prettier.doc.builders.line,
                              /* :: */[
                                renderTypeAnnotation(o.member),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]));
    case 2 : 
        return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "["),
                        /* :: */[
                          renderTypeAnnotation(node[0].element),
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "]"),
                            /* [] */0
                          ]
                        ]
                      ]));
    case 3 : 
        var o$1 = node[0];
        return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "["),
                        /* :: */[
                          renderTypeAnnotation(o$1.key),
                          /* :: */[
                            Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ": "),
                            /* :: */[
                              renderTypeAnnotation(o$1.value),
                              /* :: */[
                                Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "]"),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]));
    case 4 : 
        return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                        renderTypeAnnotation(node[0]),
                        /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "?"),
                          /* [] */0
                        ]
                      ]));
    case 5 : 
        return Prettier.doc.builders.group(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ", "), List.map(renderTypeAnnotation, node[0].list)));
    
  }
}

function renderPattern(node) {
  if (typeof node === "number") {
    return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "_");
  } else {
    switch (node.tag | 0) {
      case 0 : 
          var o = node[0];
          var match = o.annotation;
          if (match) {
            return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o.identifier), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ": ")), renderTypeAnnotation(match[0]));
          } else {
            return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o.identifier);
          }
      case 1 : 
          var o$1 = node[0];
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], o$1.kind),
                          /* :: */[
                            Prettier.doc.builders.line,
                            /* :: */[
                              renderPattern(o$1.pattern),
                              /* [] */0
                            ]
                          ]
                        ]));
      case 2 : 
          return Prettier.doc.builders.group(Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "("),
                          /* :: */[
                            Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ", "), List.map(renderPattern, node[0].elements)),
                            /* :: */[
                              Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], ")"),
                              /* [] */0
                            ]
                          ]
                        ]));
      case 3 : 
          return Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* concat */2], /* :: */[
                      renderPattern(node[0].value),
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "?"),
                        /* [] */0
                      ]
                    ]);
      case 4 : 
          return render(node[0].value);
      
    }
  }
}

function renderInitializerBlock(node) {
  var o = node[0];
  var renderStatements = function (statements) {
    if (statements) {
      if (statements[1]) {
        return render(/* CodeBlock */Block.__(17, [{
                        statements: statements
                      }]));
      } else {
        return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{ "), render(statements[0])), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], " }"));
      }
    } else {
      return render(/* CodeBlock */Block.__(17, [{
                      statements: statements
                    }]));
    }
  };
  var willSet = Render$LonaCompilerCore.renderOptional((function (statements) {
          return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "willSet "), renderStatements(statements));
        }), o.willSet);
  var didSet = Render$LonaCompilerCore.renderOptional((function (statements) {
          return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "didSet "), renderStatements(statements));
        }), o.didSet);
  var match = o.willSet;
  var match$1 = o.didSet;
  if (match) {
    if (match$1) {
      return Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"), Prettier.doc.builders.indent(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* <+> */5], Prettier.doc.builders.hardline, willSet), Prettier.doc.builders.hardline), didSet))), Prettier.doc.builders.hardline), Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"));
    } else {
      return Prettier.doc.builders.group(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Prettier.doc.builders.line, /* :: */[
                      Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"),
                      /* :: */[
                        willSet,
                        /* :: */[
                          Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"),
                          /* [] */0
                        ]
                      ]
                    ]));
    }
  } else if (match$1) {
    return Prettier.doc.builders.group(Curry._2(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* join */4], Prettier.doc.builders.line, /* :: */[
                    Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "{"),
                    /* :: */[
                      didSet,
                      /* :: */[
                        Curry._1(Prettier$LonaCompilerCore.Doc[/* Builders */0][/* s */0], "}"),
                        /* [] */0
                      ]
                    ]
                  ]));
  } else {
    return Prettier$LonaCompilerCore.Doc[/* Builders */0][/* empty */1];
  }
}

function toString(ast) {
  var doc = render(ast);
  var printerOptions = {
    printWidth: 120,
    tabWidth: 2,
    useTabs: /* false */0
  };
  return Prettier.doc.printer.printDocToString(doc, printerOptions).formatted;
}

var Render = /* module */[
  /* renderFloat */renderFloat,
  /* renderAccessLevelModifier */renderAccessLevelModifier,
  /* renderMutationModifier */renderMutationModifier,
  /* renderDeclarationModifier */renderDeclarationModifier,
  /* render */render,
  /* renderLiteral */renderLiteral,
  /* renderTypeAnnotation */renderTypeAnnotation,
  /* renderPattern */renderPattern,
  /* renderInitializerBlock */renderInitializerBlock,
  /* toString */toString
];

function toSwiftAST(colors, rootLayer, logicRootNode) {
  var logicValueToSwiftAST = function (x) {
    if (typeof x === "number") {
      return /* Empty */0;
    } else if (x.tag) {
      return lonaValue(colors, x[0]);
    } else {
      var node = x;
      if (typeof node === "number") {
        return /* SwiftIdentifier */Block.__(5, ["BadIdentifier"]);
      } else if (node.tag) {
        return /* SwiftIdentifier */Block.__(5, ["BadIdentifier"]);
      } else {
        var match = node[1];
        if (match) {
          var tail = match[1];
          switch (match[0]) {
            case "layers" : 
                if (tail) {
                  var tail$1 = tail[1];
                  var second = tail[0];
                  if (second === rootLayer[/* name */1]) {
                    return /* SwiftIdentifier */Block.__(5, [List.fold_left((function (a, b) {
                                      return a + ("." + LodashCamelcase(b));
                                    }), List.hd(tail$1), List.tl(tail$1))]);
                  } else {
                    return /* SwiftIdentifier */Block.__(5, [List.fold_left((function (a, b) {
                                      return a + ("." + LodashCamelcase(b));
                                    }), LodashCamelcase(second) + "View", tail$1)]);
                  }
                } else {
                  return /* SwiftIdentifier */Block.__(5, ["BadIdentifier"]);
                }
                break;
            case "parameters" : 
                return /* SwiftIdentifier */Block.__(5, [List.hd(tail)]);
            default:
              return /* SwiftIdentifier */Block.__(5, ["BadIdentifier"]);
          }
        } else {
          return /* SwiftIdentifier */Block.__(5, ["BadIdentifier"]);
        }
      }
    }
  };
  var typeAnnotationDoc = function (param) {
    if (param.tag) {
      return /* TypeName */Block.__(0, [param[0]]);
    } else {
      var typeName = param[0];
      if (typeName === "Boolean") {
        return /* TypeName */Block.__(0, ["Bool"]);
      } else {
        return /* TypeName */Block.__(0, [typeName]);
      }
    }
  };
  var fromCmp = function (x) {
    switch (x) {
      case 0 : 
          return "==";
      case 1 : 
          return "!=";
      case 2 : 
          return ">";
      case 3 : 
          return ">=";
      case 4 : 
          return "<";
      case 5 : 
          return "<=";
      case 6 : 
          return "???";
      
    }
  };
  var unwrapBlock = function (node) {
    if (typeof node === "number") {
      return /* :: */[
              node,
              /* [] */0
            ];
    } else if (node.tag === 5) {
      return node[0];
    } else {
      return /* :: */[
              node,
              /* [] */0
            ];
    }
  };
  var inner = function (logicRootNode) {
    if (typeof logicRootNode === "number") {
      return /* Empty */0;
    } else {
      switch (logicRootNode.tag | 0) {
        case 0 : 
            return /* IfStatement */Block.__(11, [{
                        condition: /* BinaryExpression */Block.__(2, [{
                              left: logicValueToSwiftAST(logicRootNode[0]),
                              operator: fromCmp(logicRootNode[1]),
                              right: logicValueToSwiftAST(logicRootNode[2])
                            }]),
                        block: List.map(inner, unwrapBlock(logicRootNode[3]))
                      }]);
        case 1 : 
            return /* IfStatement */Block.__(11, [{
                        condition: logicValueToSwiftAST(logicRootNode[0]),
                        block: List.map(inner, unwrapBlock(logicRootNode[1]))
                      }]);
        case 2 : 
            var match = logicValueToSwiftAST(logicRootNode[1]);
            var match$1 = logicValueToSwiftAST(logicRootNode[0]);
            var match$2;
            if (typeof match === "number") {
              match$2 = [
                match,
                match$1
              ];
            } else if (match.tag === 5) {
              var name = match[0];
              var exit = 0;
              if (typeof match$1 === "number") {
                exit = 1;
              } else if (match$1.tag) {
                exit = 1;
              } else {
                var match$3 = match$1[0];
                if (typeof match$3 === "number" || !(!match$3.tag && name.endsWith("visible"))) {
                  exit = 1;
                } else {
                  match$2 = /* tuple */[
                    /* SwiftIdentifier */Block.__(5, [name.replace("visible", "isHidden")]),
                    /* LiteralExpression */Block.__(0, [/* Boolean */Block.__(0, [1 - match$3[0]])])
                  ];
                }
              }
              if (exit === 1) {
                match$2 = name.endsWith("borderRadius") ? /* tuple */[
                    /* SwiftIdentifier */Block.__(5, [name.replace("borderRadius", "layer.cornerRadius")]),
                    match$1
                  ] : (
                    name.endsWith("height") ? /* tuple */[
                        /* SwiftIdentifier */Block.__(5, [name.replace(".height", "HeightAnchorConstraint?.constant")]),
                        match$1
                      ] : (
                        name.endsWith("width") ? /* tuple */[
                            /* SwiftIdentifier */Block.__(5, [name.replace(".width", "WidthAnchorConstraint?.constant")]),
                            match$1
                          ] : [
                            match,
                            match$1
                          ]
                      )
                  );
              }
              
            } else {
              match$2 = [
                match,
                match$1
              ];
            }
            return /* BinaryExpression */Block.__(2, [{
                        left: match$2[0],
                        operator: "=",
                        right: match$2[1]
                      }]);
        case 3 : 
            return /* BinaryExpression */Block.__(2, [{
                        left: logicValueToSwiftAST(logicRootNode[2]),
                        operator: "=",
                        right: /* BinaryExpression */Block.__(2, [{
                              left: logicValueToSwiftAST(logicRootNode[0]),
                              operator: "+",
                              right: logicValueToSwiftAST(logicRootNode[1])
                            }])
                      }]);
        case 4 : 
            var value = logicRootNode[0];
            if (typeof value === "number") {
              return /* Empty */0;
            } else if (value.tag) {
              return /* Empty */0;
            } else {
              var path = value[1];
              return /* VariableDeclaration */Block.__(7, [{
                          modifiers: /* [] */0,
                          pattern: /* IdentifierPattern */Block.__(0, [{
                                identifier: List.fold_left((function (a, b) {
                                        return a + ("." + b);
                                      }), List.hd(path), List.tl(path)),
                                annotation: /* Some */[typeAnnotationDoc(value[0])]
                              }]),
                          init: /* None */0,
                          block: /* None */0
                        }]);
            }
            break;
        case 5 : 
            return /* StatementListHelper */Block.__(18, [List.map(inner, logicRootNode[0])]);
        
      }
    }
  };
  return List.map(inner, unwrapBlock(logicRootNode));
}

var SwiftLogic = /* module */[/* toSwiftAST */toSwiftAST];

function render$1(target, colors) {
  if (target !== 0) {
    var colorConstantDoc = function (color) {
      return /* LineEndComment */Block.__(16, [{
                  comment: color[/* value */2],
                  line: /* ConstantDeclaration */Block.__(6, [{
                        modifiers: /* :: */[
                          /* AccessLevelModifier */Block.__(0, [/* PublicModifier */3]),
                          /* :: */[
                            /* StaticModifier */11,
                            /* [] */0
                          ]
                        ],
                        pattern: /* IdentifierPattern */Block.__(0, [{
                              identifier: color[/* id */0],
                              annotation: /* None */0
                            }]),
                        init: /* Some */[/* LiteralExpression */Block.__(0, [/* Color */Block.__(4, [color[/* value */2]])])]
                      }])
                }]);
    };
    return toString(/* TopLevelDeclaration */Block.__(19, [{
                    statements: /* :: */[
                      /* ImportDeclaration */Block.__(10, ["UIKit"]),
                      /* :: */[
                        /* Empty */0,
                        /* :: */[
                          /* ClassDeclaration */Block.__(4, [{
                                name: "Colors",
                                inherits: /* [] */0,
                                modifier: /* None */0,
                                isFinal: /* false */0,
                                body: List.map(colorConstantDoc, colors)
                              }]),
                          /* [] */0
                        ]
                      ]
                    ]
                  }]));
  } else {
    console.log("Color generation not supported for target", target);
    return "error";
  }
}

var Color = /* module */[/* render */render$1];

function generate(name, json, colors) {
  var rootLayer = Decode$LonaCompilerCore.Component[/* rootLayer */1](json);
  var nonRootLayers = List.tl(Layer$LonaCompilerCore.flatten(rootLayer));
  var logic = Decode$LonaCompilerCore.Component[/* logic */2](json);
  var assignments = Layer$LonaCompilerCore.parameterAssignmentsFromLogic(rootLayer, logic);
  var parameters = Decode$LonaCompilerCore.Component[/* parameters */0](json);
  var priorityName = function (param) {
    if (param !== 0) {
      return "defaultLow";
    } else {
      return "required";
    }
  };
  var typeAnnotationDoc = function (param) {
    if (param.tag) {
      return /* TypeName */Block.__(0, [param[0]]);
    } else {
      var typeName = param[0];
      if (typeName === "Boolean") {
        return /* TypeName */Block.__(0, ["Bool"]);
      } else {
        return /* TypeName */Block.__(0, [typeName]);
      }
    }
  };
  var parameterVariableDoc = function (parameter) {
    return /* VariableDeclaration */Block.__(7, [{
                modifiers: /* :: */[
                  /* AccessLevelModifier */Block.__(0, [/* PublicModifier */3]),
                  /* [] */0
                ],
                pattern: /* IdentifierPattern */Block.__(0, [{
                      identifier: parameter[/* name */0],
                      annotation: /* Some */[typeAnnotationDoc(parameter[/* ltype */1])]
                    }]),
                init: /* None */0,
                block: /* Some */[/* WillSetDidSetBlock */[{
                      willSet: /* None */0,
                      didSet: /* Some */[/* :: */[
                          /* FunctionCallExpression */Block.__(14, [{
                                name: /* SwiftIdentifier */Block.__(5, ["update"]),
                                arguments: /* [] */0
                              }]),
                          /* [] */0
                        ]]
                    }]]
              }]);
  };
  var viewTypeInitDoc = function (param) {
    switch (param) {
      case 0 : 
          return /* SwiftIdentifier */Block.__(5, ["UIView"]);
      case 1 : 
          return /* SwiftIdentifier */Block.__(5, ["UILabel"]);
      case 2 : 
          return /* SwiftIdentifier */Block.__(5, ["UIImageView"]);
      case 3 : 
      case 4 : 
      case 5 : 
      case 6 : 
          return /* SwiftIdentifier */Block.__(5, ["TypeUnknown"]);
      
    }
  };
  var viewVariableDoc = function (layer) {
    var match = +(layer[/* typeName */0] === /* Text */1);
    return /* VariableDeclaration */Block.__(7, [{
                modifiers: /* :: */[
                  /* AccessLevelModifier */Block.__(0, [/* PrivateModifier */0]),
                  /* [] */0
                ],
                pattern: /* IdentifierPattern */Block.__(0, [{
                      identifier: LodashCamelcase(layer[/* name */1]) + "View",
                      annotation: /* None */0
                    }]),
                init: /* Some */[/* FunctionCallExpression */Block.__(14, [{
                        name: viewTypeInitDoc(layer[/* typeName */0]),
                        arguments: match !== 0 ? /* [] */0 : /* :: */[
                            /* FunctionCallArgument */Block.__(13, [{
                                  name: /* Some */[/* SwiftIdentifier */Block.__(5, ["frame"])],
                                  value: /* SwiftIdentifier */Block.__(5, [".zero"])
                                }]),
                            /* [] */0
                          ]
                      }])],
                block: /* None */0
              }]);
  };
  var spacingVariableDoc = function (layer) {
    var variableName = function (variable) {
      var match = +(layer === rootLayer);
      if (match !== 0) {
        return variable;
      } else {
        return LodashCamelcase(layer[/* name */1]) + "View" + LodashUpperfirst(variable);
      }
    };
    var match = +(layer === rootLayer);
    var marginVariables;
    if (match !== 0) {
      marginVariables = /* [] */0;
    } else {
      var createVariable = function (marginParameter) {
        return /* VariableDeclaration */Block.__(7, [{
                    modifiers: /* :: */[
                      /* AccessLevelModifier */Block.__(0, [/* PrivateModifier */0]),
                      /* [] */0
                    ],
                    pattern: /* IdentifierPattern */Block.__(0, [{
                          identifier: variableName(marginParameter[/* swiftName */1]),
                          annotation: /* Some */[/* TypeName */Block.__(0, ["CGFloat"])]
                        }]),
                    init: /* Some */[/* LiteralExpression */Block.__(0, [/* FloatingPoint */Block.__(2, [Layer$LonaCompilerCore.getNumberParameter(marginParameter[/* lonaName */0], layer)])])],
                    block: /* None */0
                  }]);
      };
      marginVariables = List.map(createVariable, /* :: */[
            /* record */[
              /* lonaName */"marginTop",
              /* swiftName */"topMargin"
            ],
            /* :: */[
              /* record */[
                /* lonaName */"marginRight",
                /* swiftName */"trailingMargin"
              ],
              /* :: */[
                /* record */[
                  /* lonaName */"marginBottom",
                  /* swiftName */"bottomMargin"
                ],
                /* :: */[
                  /* record */[
                    /* lonaName */"marginLeft",
                    /* swiftName */"leadingMargin"
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]);
    }
    var match$1 = layer[/* children */3];
    var paddingVariables;
    if (match$1) {
      var createVariable$1 = function (paddingParameter) {
        return /* VariableDeclaration */Block.__(7, [{
                    modifiers: /* :: */[
                      /* AccessLevelModifier */Block.__(0, [/* PrivateModifier */0]),
                      /* [] */0
                    ],
                    pattern: /* IdentifierPattern */Block.__(0, [{
                          identifier: variableName(paddingParameter[/* swiftName */1]),
                          annotation: /* Some */[/* TypeName */Block.__(0, ["CGFloat"])]
                        }]),
                    init: /* Some */[/* LiteralExpression */Block.__(0, [/* FloatingPoint */Block.__(2, [Layer$LonaCompilerCore.getNumberParameter(paddingParameter[/* lonaName */0], layer)])])],
                    block: /* None */0
                  }]);
      };
      paddingVariables = List.map(createVariable$1, /* :: */[
            /* record */[
              /* lonaName */"paddingTop",
              /* swiftName */"topPadding"
            ],
            /* :: */[
              /* record */[
                /* lonaName */"paddingRight",
                /* swiftName */"trailingPadding"
              ],
              /* :: */[
                /* record */[
                  /* lonaName */"paddingBottom",
                  /* swiftName */"bottomPadding"
                ],
                /* :: */[
                  /* record */[
                    /* lonaName */"paddingLeft",
                    /* swiftName */"leadingPadding"
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]);
    } else {
      paddingVariables = /* [] */0;
    }
    return Pervasives.$at(marginVariables, paddingVariables);
  };
  var initParameterDoc = function (parameter) {
    return /* Parameter */Block.__(12, [{
                externalName: /* None */0,
                localName: parameter[/* name */0],
                annotation: typeAnnotationDoc(parameter[/* ltype */1]),
                defaultValue: /* None */0
              }]);
  };
  var initParameterAssignmentDoc = function (parameter) {
    return /* BinaryExpression */Block.__(2, [{
                left: /* MemberExpression */Block.__(1, [/* :: */[
                      /* SwiftIdentifier */Block.__(5, ["self"]),
                      /* :: */[
                        /* SwiftIdentifier */Block.__(5, [parameter[/* name */0]]),
                        /* [] */0
                      ]
                    ]]),
                operator: "=",
                right: /* SwiftIdentifier */Block.__(5, [parameter[/* name */0]])
              }]);
  };
  var initializerCoderDoc = function () {
    return /* InitializerDeclaration */Block.__(8, [{
                modifiers: /* :: */[
                  /* AccessLevelModifier */Block.__(0, [/* PublicModifier */3]),
                  /* :: */[
                    /* RequiredModifier */10,
                    /* [] */0
                  ]
                ],
                parameters: /* :: */[
                  /* Parameter */Block.__(12, [{
                        externalName: /* Some */["coder"],
                        localName: "aDecoder",
                        annotation: /* TypeName */Block.__(0, ["NSCoder"]),
                        defaultValue: /* None */0
                      }]),
                  /* [] */0
                ],
                failable: /* Some */["?"],
                body: /* :: */[
                  /* FunctionCallExpression */Block.__(14, [{
                        name: /* SwiftIdentifier */Block.__(5, ["fatalError"]),
                        arguments: /* :: */[
                          /* FunctionCallArgument */Block.__(13, [{
                                name: /* None */0,
                                value: /* SwiftIdentifier */Block.__(5, ["\"init(coder:) has not been implemented\""])
                              }]),
                          /* [] */0
                        ]
                      }]),
                  /* [] */0
                ]
              }]);
  };
  var initializerDoc = function () {
    return /* InitializerDeclaration */Block.__(8, [{
                modifiers: /* :: */[
                  /* AccessLevelModifier */Block.__(0, [/* PublicModifier */3]),
                  /* [] */0
                ],
                parameters: List.map(initParameterDoc, parameters),
                failable: /* None */0,
                body: joinGroups(/* Empty */0, /* :: */[
                      List.map(initParameterAssignmentDoc, parameters),
                      /* :: */[
                        /* :: */[
                          /* MemberExpression */Block.__(1, [/* :: */[
                                /* SwiftIdentifier */Block.__(5, ["super"]),
                                /* :: */[
                                  /* FunctionCallExpression */Block.__(14, [{
                                        name: /* SwiftIdentifier */Block.__(5, ["init"]),
                                        arguments: /* :: */[
                                          /* FunctionCallArgument */Block.__(13, [{
                                                name: /* Some */[/* SwiftIdentifier */Block.__(5, ["frame"])],
                                                value: /* SwiftIdentifier */Block.__(5, [".zero"])
                                              }]),
                                          /* [] */0
                                        ]
                                      }]),
                                  /* [] */0
                                ]
                              ]]),
                          /* [] */0
                        ],
                        /* :: */[
                          /* :: */[
                            /* FunctionCallExpression */Block.__(14, [{
                                  name: /* SwiftIdentifier */Block.__(5, ["setUpViews"]),
                                  arguments: /* [] */0
                                }]),
                            /* :: */[
                              /* FunctionCallExpression */Block.__(14, [{
                                    name: /* SwiftIdentifier */Block.__(5, ["setUpConstraints"]),
                                    arguments: /* [] */0
                                  }]),
                              /* [] */0
                            ]
                          ],
                          /* :: */[
                            /* :: */[
                              /* FunctionCallExpression */Block.__(14, [{
                                    name: /* SwiftIdentifier */Block.__(5, ["update"]),
                                    arguments: /* [] */0
                                  }]),
                              /* [] */0
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ])
              }]);
  };
  var memberOrSelfExpression = function (firstIdentifier, statements) {
    if (firstIdentifier === "self") {
      return /* MemberExpression */Block.__(1, [statements]);
    } else {
      return /* MemberExpression */Block.__(1, [Pervasives.$at(/* :: */[
                      /* SwiftIdentifier */Block.__(5, [firstIdentifier]),
                      /* [] */0
                    ], statements)]);
    }
  };
  var parentNameOrSelf = function (parent) {
    var match = +(parent === rootLayer);
    if (match !== 0) {
      return "self";
    } else {
      return LodashCamelcase(parent[/* name */1]) + "View";
    }
  };
  var initialLayerValue = function (layer, name) {
    var match = StringMap$LonaCompilerCore.find_opt(name, layer[/* parameters */2]);
    if (match) {
      return lonaValue(colors, match[0]);
    } else {
      var param = name;
      if (param === "backgroundColor") {
        return /* MemberExpression */Block.__(1, [/* :: */[
                    /* SwiftIdentifier */Block.__(5, ["UIColor"]),
                    /* :: */[
                      /* SwiftIdentifier */Block.__(5, ["clear"]),
                      /* [] */0
                    ]
                  ]]);
      } else {
        return /* LiteralExpression */Block.__(0, [/* Integer */Block.__(1, [0])]);
      }
    }
  };
  var defineInitialLayerValue = function (layer, param) {
    var name = param[0];
    var match = initialLayerValue(layer, name);
    var match$1;
    var exit = 0;
    switch (name) {
      case "borderRadius" : 
          if (typeof match === "number") {
            exit = 1;
          } else if (match.tag) {
            exit = 1;
          } else {
            var tmp = match[0];
            if (typeof tmp === "number" || tmp.tag !== 2) {
              exit = 1;
            } else {
              match$1 = /* tuple */[
                memberOrSelfExpression(parentNameOrSelf(layer), /* :: */[
                      /* SwiftIdentifier */Block.__(5, ["layer"]),
                      /* :: */[
                        /* SwiftIdentifier */Block.__(5, ["cornerRadius"]),
                        /* [] */0
                      ]
                    ]),
                match
              ];
            }
          }
          break;
      case "height" : 
          if (typeof match === "number") {
            exit = 1;
          } else if (match.tag) {
            exit = 1;
          } else {
            var tmp$1 = match[0];
            if (typeof tmp$1 === "number" || tmp$1.tag !== 2) {
              exit = 1;
            } else {
              match$1 = /* tuple */[
                /* SwiftIdentifier */Block.__(5, [parentNameOrSelf(layer) + "HeightAnchorConstraint?.constant"]),
                match
              ];
            }
          }
          break;
      case "visible" : 
          if (typeof match === "number") {
            exit = 1;
          } else if (match.tag) {
            exit = 1;
          } else {
            var match$2 = match[0];
            if (typeof match$2 === "number" || match$2.tag) {
              exit = 1;
            } else {
              match$1 = /* tuple */[
                memberOrSelfExpression(parentNameOrSelf(layer), /* :: */[
                      /* SwiftIdentifier */Block.__(5, ["isHidden"]),
                      /* [] */0
                    ]),
                /* LiteralExpression */Block.__(0, [/* Boolean */Block.__(0, [1 - match$2[0]])])
              ];
            }
          }
          break;
      case "width" : 
          if (typeof match === "number") {
            exit = 1;
          } else if (match.tag) {
            exit = 1;
          } else {
            var tmp$2 = match[0];
            if (typeof tmp$2 === "number" || tmp$2.tag !== 2) {
              exit = 1;
            } else {
              match$1 = /* tuple */[
                /* SwiftIdentifier */Block.__(5, [parentNameOrSelf(layer) + "WidthAnchorConstraint?.constant"]),
                match
              ];
            }
          }
          break;
      default:
        exit = 1;
    }
    if (exit === 1) {
      match$1 = /* tuple */[
        memberOrSelfExpression(parentNameOrSelf(layer), /* :: */[
              /* SwiftIdentifier */Block.__(5, [name]),
              /* [] */0
            ]),
        match
      ];
    }
    return /* BinaryExpression */Block.__(2, [{
                left: match$1[0],
                operator: "=",
                right: match$1[1]
              }]);
  };
  var setUpViewsDoc = function (root) {
    var setUpDefaultsDoc = function () {
      var filterParameters = function (param) {
        var name = param[0];
        if (name !== "image" && name !== "textStyle" && name !== "flexDirection" && name !== "justifyContent" && name !== "alignSelf" && name !== "alignItems" && name !== "flex" && name !== "font" && !name.startsWith("padding") && !name.startsWith("margin") && name !== "height") {
          return +(name !== "width");
        } else {
          return /* false */0;
        }
      };
      var defineInitialLayerValues = function (layer) {
        return List.map((function (param) {
                      return defineInitialLayerValue(layer, /* tuple */[
                                  param[0],
                                  param[1]
                                ]);
                    }), List.filter((function (param) {
                            var layer$1 = layer;
                            var param$1 = param;
                            var match = Layer$LonaCompilerCore.LayerMap[/* find_opt */24](layer$1, assignments);
                            if (match) {
                              var match$1 = StringMap$LonaCompilerCore.find_opt(param$1[0], match[0]);
                              if (match$1) {
                                return /* false */0;
                              } else {
                                return /* true */1;
                              }
                            } else {
                              return /* true */1;
                            }
                          }))(List.filter(filterParameters)(Curry._1(StringMap$LonaCompilerCore.bindings, layer[/* parameters */2]))));
      };
      return List.concat(List.map(defineInitialLayerValues, Layer$LonaCompilerCore.flatten(rootLayer)));
    };
    var addSubviews = function (parent, layer) {
      if (parent) {
        return /* :: */[
                /* FunctionCallExpression */Block.__(14, [{
                      name: memberOrSelfExpression(parentNameOrSelf(parent[0]), /* :: */[
                            /* SwiftIdentifier */Block.__(5, ["addSubview"]),
                            /* [] */0
                          ]),
                      arguments: /* :: */[
                        /* SwiftIdentifier */Block.__(5, [LodashCamelcase(layer[/* name */1]) + "View"]),
                        /* [] */0
                      ]
                    }]),
                /* [] */0
              ];
      } else {
        return /* [] */0;
      }
    };
    return /* FunctionDeclaration */Block.__(9, [{
                name: "setUpViews",
                modifiers: /* :: */[
                  /* AccessLevelModifier */Block.__(0, [/* PrivateModifier */0]),
                  /* [] */0
                ],
                parameters: /* [] */0,
                body: joinGroups(/* Empty */0, /* :: */[
                      List.concat(Layer$LonaCompilerCore.flatmapParent(addSubviews, root)),
                      /* :: */[
                        setUpDefaultsDoc(/* () */0),
                        /* [] */0
                      ]
                    ])
              }]);
  };
  var getConstraints = function (root) {
    var setUpContraint = function (layer, anchor1, parent, anchor2, relation, value, suffix) {
      var match = +(layer === rootLayer);
      var variableName = (
        match !== 0 ? anchor1 : LodashCamelcase(layer[/* name */1]) + "View" + LodashUpperfirst(anchor1)
      ) + suffix;
      var initialValue = /* MemberExpression */Block.__(1, [/* :: */[
            /* SwiftIdentifier */Block.__(5, [LodashCamelcase(layer[/* name */1]) + "View"]),
            /* :: */[
              /* SwiftIdentifier */Block.__(5, [anchor1]),
              /* :: */[
                /* FunctionCallExpression */Block.__(14, [{
                      name: /* SwiftIdentifier */Block.__(5, ["constraint"]),
                      arguments: /* :: */[
                        /* FunctionCallArgument */Block.__(13, [{
                              name: /* Some */[/* SwiftIdentifier */Block.__(5, [relation])],
                              value: memberOrSelfExpression(parentNameOrSelf(parent), /* :: */[
                                    /* SwiftIdentifier */Block.__(5, [anchor2]),
                                    /* [] */0
                                  ])
                            }]),
                        /* :: */[
                          /* FunctionCallArgument */Block.__(13, [{
                                name: /* Some */[/* SwiftIdentifier */Block.__(5, ["constant"])],
                                value: value
                              }]),
                          /* [] */0
                        ]
                      ]
                    }]),
                /* [] */0
              ]
            ]
          ]]);
      return /* record */[
              /* variableName */variableName,
              /* initialValue */initialValue,
              /* priority : Required */0
            ];
    };
    var setUpLessThanOrEqualToContraint = function (layer, anchor1, parent, anchor2, value, suffix) {
      var match = +(layer === rootLayer);
      var variableName = (
        match !== 0 ? anchor1 : LodashCamelcase(layer[/* name */1]) + "View" + LodashUpperfirst(anchor1)
      ) + suffix;
      var initialValue = /* MemberExpression */Block.__(1, [/* :: */[
            /* SwiftIdentifier */Block.__(5, [LodashCamelcase(layer[/* name */1]) + "View"]),
            /* :: */[
              /* SwiftIdentifier */Block.__(5, [anchor1]),
              /* :: */[
                /* FunctionCallExpression */Block.__(14, [{
                      name: /* SwiftIdentifier */Block.__(5, ["constraint"]),
                      arguments: /* :: */[
                        /* FunctionCallArgument */Block.__(13, [{
                              name: /* Some */[/* SwiftIdentifier */Block.__(5, ["lessThanOrEqualTo"])],
                              value: memberOrSelfExpression(parentNameOrSelf(parent), /* :: */[
                                    /* SwiftIdentifier */Block.__(5, [anchor2]),
                                    /* [] */0
                                  ])
                            }]),
                        /* :: */[
                          /* FunctionCallArgument */Block.__(13, [{
                                name: /* Some */[/* SwiftIdentifier */Block.__(5, ["constant"])],
                                value: value
                              }]),
                          /* [] */0
                        ]
                      ]
                    }]),
                /* [] */0
              ]
            ]
          ]]);
      return /* record */[
              /* variableName */variableName,
              /* initialValue */initialValue,
              /* priority : Low */1
            ];
    };
    var setUpDimensionContraint = function (layer, anchor, constant) {
      var match = +(layer === rootLayer);
      var variableName = (
        match !== 0 ? anchor : LodashCamelcase(layer[/* name */1]) + "View" + LodashUpperfirst(anchor)
      ) + "Constraint";
      var initialValue = memberOrSelfExpression(parentNameOrSelf(layer), /* :: */[
            /* SwiftIdentifier */Block.__(5, [anchor]),
            /* :: */[
              /* FunctionCallExpression */Block.__(14, [{
                    name: /* SwiftIdentifier */Block.__(5, ["constraint"]),
                    arguments: /* :: */[
                      /* FunctionCallArgument */Block.__(13, [{
                            name: /* Some */[/* SwiftIdentifier */Block.__(5, ["equalToConstant"])],
                            value: /* LiteralExpression */Block.__(0, [/* FloatingPoint */Block.__(2, [constant])])
                          }]),
                      /* [] */0
                    ]
                  }]),
              /* [] */0
            ]
          ]);
      return /* record */[
              /* variableName */variableName,
              /* initialValue */initialValue,
              /* priority : Required */0
            ];
    };
    var negateNumber = function (expression) {
      return /* PrefixExpression */Block.__(3, [{
                  operator: "-",
                  expression: expression
                }]);
    };
    var constraintConstantExpression = function (layer, variable1, parent, variable2) {
      var variableName = function (layer, variable) {
        var match = +(layer === rootLayer);
        if (match !== 0) {
          return variable;
        } else {
          return LodashCamelcase(layer[/* name */1]) + "View" + LodashUpperfirst(variable);
        }
      };
      return /* BinaryExpression */Block.__(2, [{
                  left: /* SwiftIdentifier */Block.__(5, [variableName(layer, variable1)]),
                  operator: "+",
                  right: /* SwiftIdentifier */Block.__(5, [variableName(parent, variable2)])
                }]);
    };
    var constrainAxes = function (layer) {
      var direction = Layer$LonaCompilerCore.getFlexDirection(layer);
      var match = +(direction === "column");
      var primaryBeforeAnchor = match !== 0 ? "topAnchor" : "leadingAnchor";
      var match$1 = +(direction === "column");
      var primaryAfterAnchor = match$1 !== 0 ? "bottomAnchor" : "trailingAnchor";
      var match$2 = +(direction === "column");
      var secondaryBeforeAnchor = match$2 !== 0 ? "leadingAnchor" : "topAnchor";
      var match$3 = +(direction === "column");
      var secondaryAfterAnchor = match$3 !== 0 ? "trailingAnchor" : "bottomAnchor";
      var height = Layer$LonaCompilerCore.getNumberParameterOpt("height", layer);
      var width = Layer$LonaCompilerCore.getNumberParameterOpt("width", layer);
      var match$4 = +(direction === "column");
      var primaryDimension = match$4 !== 0 ? "height" : "width";
      var match$5 = +(direction === "column");
      var secondaryDimension = match$5 !== 0 ? "width" : "height";
      var secondaryDimensionAnchor = secondaryDimension + "Anchor";
      var sizingRules = Layer$LonaCompilerCore.getSizingRules(Layer$LonaCompilerCore.findParent(rootLayer, layer), layer);
      var match$6 = +(direction === "column");
      var primarySizingRule = match$6 !== 0 ? sizingRules[/* height */1] : sizingRules[/* width */0];
      var match$7 = +(direction === "column");
      var secondarySizingRule = match$7 !== 0 ? sizingRules[/* width */0] : sizingRules[/* height */1];
      var flexChildren = List.filter((function (child) {
                return +(Layer$LonaCompilerCore.getNumberParameter("flex", child) === 1.0);
              }))(layer[/* children */3]);
      var addConstraints = function (index, child) {
        var childSizingRules = Layer$LonaCompilerCore.getSizingRules(/* Some */[layer], child);
        var match = +(direction === "column");
        var childSecondarySizingRule = match !== 0 ? childSizingRules[/* width */0] : childSizingRules[/* height */1];
        var firstViewConstraints;
        if (index !== 0) {
          firstViewConstraints = /* [] */0;
        } else {
          var match$1 = +(direction === "column");
          var primaryBeforeConstant = match$1 !== 0 ? constraintConstantExpression(layer, "topPadding", child, "topMargin") : constraintConstantExpression(layer, "leadingPadding", child, "leadingMargin");
          firstViewConstraints = /* :: */[
            setUpContraint(child, primaryBeforeAnchor, layer, primaryBeforeAnchor, "equalTo", primaryBeforeConstant, "Constraint"),
            /* [] */0
          ];
        }
        var lastViewConstraints;
        if (index === (List.length(layer[/* children */3]) - 1 | 0)) {
          var match$2 = List.length(flexChildren);
          var needsPrimaryAfterConstraint = typeof primarySizingRule === "number" ? (
              primarySizingRule !== 0 || match$2 ? /* true */1 : /* false */0
            ) : (
              match$2 ? /* true */1 : /* false */0
            );
          var match$3 = +(direction === "column");
          var primaryAfterConstant = match$3 !== 0 ? constraintConstantExpression(layer, "bottomPadding", child, "bottomMargin") : constraintConstantExpression(layer, "trailingPadding", child, "trailingMargin");
          lastViewConstraints = needsPrimaryAfterConstraint !== 0 ? /* :: */[
              setUpContraint(child, primaryAfterAnchor, layer, primaryAfterAnchor, "equalTo", negateNumber(primaryAfterConstant), "Constraint"),
              /* [] */0
            ] : /* [] */0;
        } else {
          lastViewConstraints = /* [] */0;
        }
        var middleViewConstraints;
        if (index !== 0) {
          var previousLayer = List.nth(layer[/* children */3], index - 1 | 0);
          var match$4 = +(direction === "column");
          var betweenConstant = match$4 !== 0 ? constraintConstantExpression(previousLayer, "bottomMargin", child, "topMargin") : constraintConstantExpression(previousLayer, "trailingMargin", child, "leadingMargin");
          middleViewConstraints = /* :: */[
            setUpContraint(child, primaryBeforeAnchor, previousLayer, primaryAfterAnchor, "equalTo", betweenConstant, "Constraint"),
            /* [] */0
          ];
        } else {
          middleViewConstraints = /* [] */0;
        }
        var match$5 = +(direction === "column");
        var secondaryBeforeConstant = match$5 !== 0 ? constraintConstantExpression(layer, "leadingPadding", child, "leadingMargin") : constraintConstantExpression(layer, "topPadding", child, "topMargin");
        var match$6 = +(direction === "column");
        var secondaryAfterConstant = match$6 !== 0 ? constraintConstantExpression(layer, "trailingPadding", child, "trailingMargin") : constraintConstantExpression(layer, "bottomPadding", child, "bottomMargin");
        var secondaryBeforeConstraint = setUpContraint(child, secondaryBeforeAnchor, layer, secondaryBeforeAnchor, "equalTo", secondaryBeforeConstant, "Constraint");
        var secondaryAfterConstraint;
        var exit = 0;
        if (typeof childSecondarySizingRule === "number") {
          if (childSecondarySizingRule !== 0) {
            if (typeof secondarySizingRule === "number" && secondarySizingRule === 0) {
              secondaryAfterConstraint = /* :: */[
                setUpContraint(child, secondaryAfterAnchor, layer, secondaryAfterAnchor, "lessThanOrEqualTo", negateNumber(secondaryAfterConstant), "Constraint"),
                /* [] */0
              ];
            } else {
              exit = 1;
            }
          } else {
            secondaryAfterConstraint = /* :: */[
              setUpContraint(child, secondaryAfterAnchor, layer, secondaryAfterAnchor, "equalTo", negateNumber(secondaryAfterConstant), "Constraint"),
              /* [] */0
            ];
          }
        } else {
          secondaryAfterConstraint = /* [] */0;
        }
        if (exit === 1) {
          secondaryAfterConstraint = /* :: */[
            setUpContraint(child, secondaryAfterAnchor, layer, secondaryAfterAnchor, "equalTo", negateNumber(secondaryAfterConstant), "Constraint"),
            /* [] */0
          ];
        }
        var fitContentSecondaryConstraint = typeof secondarySizingRule === "number" && secondarySizingRule !== 0 ? /* :: */[
            setUpLessThanOrEqualToContraint(child, secondaryDimensionAnchor, layer, secondaryDimensionAnchor, negateNumber(/* BinaryExpression */Block.__(2, [{
                          left: secondaryBeforeConstant,
                          operator: "+",
                          right: secondaryAfterConstant
                        }])), "ParentConstraint"),
            /* [] */0
          ] : /* [] */0;
        return Pervasives.$at(firstViewConstraints, Pervasives.$at(lastViewConstraints, Pervasives.$at(middleViewConstraints, Pervasives.$at(/* :: */[
                                secondaryBeforeConstraint,
                                /* [] */0
                              ], Pervasives.$at(secondaryAfterConstraint, fitContentSecondaryConstraint)))));
      };
      var flexChildrenConstraints;
      if (flexChildren) {
        var rest = flexChildren[1];
        var first = flexChildren[0];
        if (List.length(rest) > 0) {
          var sameAnchor = primaryDimension + "Anchor";
          flexChildrenConstraints = List.mapi((function (param, param$1) {
                  var anchor = sameAnchor;
                  var index = param;
                  var layer = param$1;
                  return setUpContraint(first, anchor, layer, anchor, "equalTo", /* LiteralExpression */Block.__(0, [/* FloatingPoint */Block.__(2, [0.0])]), "SiblingConstraint" + Pervasives.string_of_int(index));
                }), rest);
        } else {
          flexChildrenConstraints = /* [] */0;
        }
      } else {
        flexChildrenConstraints = /* [] */0;
      }
      var heightConstraint = height ? /* :: */[
          setUpDimensionContraint(layer, "heightAnchor", height[0]),
          /* [] */0
        ] : /* [] */0;
      var widthConstraint = width ? /* :: */[
          setUpDimensionContraint(layer, "widthAnchor", width[0]),
          /* [] */0
        ] : /* [] */0;
      return List.concat(Pervasives.$at(/* :: */[
                      heightConstraint,
                      /* :: */[
                        widthConstraint,
                        /* [] */0
                      ]
                    ], Pervasives.$at(/* :: */[
                          flexChildrenConstraints,
                          /* [] */0
                        ], List.mapi(addConstraints, layer[/* children */3]))));
    };
    return List.concat(Layer$LonaCompilerCore.flatmap(constrainAxes, root));
  };
  var constraints = getConstraints(rootLayer);
  var setUpConstraintsDoc = function (root) {
    var translatesAutoresizingMask = function (layer) {
      return /* BinaryExpression */Block.__(2, [{
                  left: memberOrSelfExpression(parentNameOrSelf(layer), /* :: */[
                        /* SwiftIdentifier */Block.__(5, ["translatesAutoresizingMaskIntoConstraints"]),
                        /* [] */0
                      ]),
                  operator: "=",
                  right: /* LiteralExpression */Block.__(0, [/* Boolean */Block.__(0, [/* false */0])])
                }]);
    };
    var defineConstraint = function (def) {
      return /* ConstantDeclaration */Block.__(6, [{
                  modifiers: /* [] */0,
                  init: /* Some */[def[/* initialValue */1]],
                  pattern: /* IdentifierPattern */Block.__(0, [{
                        identifier: def[/* variableName */0],
                        annotation: /* None */0
                      }])
                }]);
    };
    var setConstraintPriority = function (def) {
      return /* BinaryExpression */Block.__(2, [{
                  left: /* MemberExpression */Block.__(1, [/* :: */[
                        /* SwiftIdentifier */Block.__(5, [def[/* variableName */0]]),
                        /* :: */[
                          /* SwiftIdentifier */Block.__(5, ["priority"]),
                          /* [] */0
                        ]
                      ]]),
                  operator: "=",
                  right: /* MemberExpression */Block.__(1, [/* :: */[
                        /* SwiftIdentifier */Block.__(5, ["UILayoutPriority"]),
                        /* :: */[
                          /* SwiftIdentifier */Block.__(5, [priorityName(def[/* priority */2])]),
                          /* [] */0
                        ]
                      ]])
                }]);
    };
    var activateConstraints = function () {
      return /* FunctionCallExpression */Block.__(14, [{
                  name: /* MemberExpression */Block.__(1, [/* :: */[
                        /* SwiftIdentifier */Block.__(5, ["NSLayoutConstraint"]),
                        /* :: */[
                          /* SwiftIdentifier */Block.__(5, ["activate"]),
                          /* [] */0
                        ]
                      ]]),
                  arguments: /* :: */[
                    /* FunctionCallArgument */Block.__(13, [{
                          name: /* None */0,
                          value: /* LiteralExpression */Block.__(0, [/* Array */Block.__(5, [List.map((function (def) {
                                          return /* SwiftIdentifier */Block.__(5, [def[/* variableName */0]]);
                                        }), constraints)])])
                        }]),
                    /* [] */0
                  ]
                }]);
    };
    var assignConstraint = function (def) {
      return /* BinaryExpression */Block.__(2, [{
                  left: /* MemberExpression */Block.__(1, [/* :: */[
                        /* SwiftIdentifier */Block.__(5, ["self"]),
                        /* :: */[
                          /* SwiftIdentifier */Block.__(5, [def[/* variableName */0]]),
                          /* [] */0
                        ]
                      ]]),
                  operator: "=",
                  right: /* SwiftIdentifier */Block.__(5, [def[/* variableName */0]])
                }]);
    };
    var assignConstraintIdentifier = function (def) {
      return /* BinaryExpression */Block.__(2, [{
                  left: /* MemberExpression */Block.__(1, [/* :: */[
                        /* SwiftIdentifier */Block.__(5, [def[/* variableName */0]]),
                        /* :: */[
                          /* SwiftIdentifier */Block.__(5, ["identifier"]),
                          /* [] */0
                        ]
                      ]]),
                  operator: "=",
                  right: /* LiteralExpression */Block.__(0, [/* String */Block.__(3, [def[/* variableName */0]])])
                }]);
    };
    return /* FunctionDeclaration */Block.__(9, [{
                name: "setUpConstraints",
                modifiers: /* :: */[
                  /* AccessLevelModifier */Block.__(0, [/* PrivateModifier */0]),
                  /* [] */0
                ],
                parameters: /* [] */0,
                body: List.concat(/* :: */[
                      Layer$LonaCompilerCore.flatmap(translatesAutoresizingMask, root),
                      /* :: */[
                        /* :: */[
                          /* Empty */0,
                          /* [] */0
                        ],
                        /* :: */[
                          List.map(defineConstraint, constraints),
                          /* :: */[
                            List.map(setConstraintPriority, List.filter((function (def) {
                                          return +(def[/* priority */2] === /* Low */1);
                                        }))(constraints)),
                            /* :: */[
                              /* :: */[
                                /* Empty */0,
                                /* [] */0
                              ],
                              /* :: */[
                                /* :: */[
                                  activateConstraints(/* () */0),
                                  /* [] */0
                                ],
                                /* :: */[
                                  /* :: */[
                                    /* Empty */0,
                                    /* [] */0
                                  ],
                                  /* :: */[
                                    List.map(assignConstraint, constraints),
                                    /* :: */[
                                      /* :: */[
                                        /* LineComment */Block.__(15, ["For debugging"]),
                                        /* [] */0
                                      ],
                                      /* :: */[
                                        List.map(assignConstraintIdentifier, constraints),
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ])
              }]);
  };
  var updateDoc = function () {
    var filterParameters = function (param) {
      var name = param[0];
      if (name !== "image") {
        return +(name !== "textStyle");
      } else {
        return /* false */0;
      }
    };
    var conditionallyAssigned = Logic$LonaCompilerCore.conditionallyAssignedIdentifiers(logic);
    var defineInitialLayerValues = function (param) {
      var layer = param[0];
      return List.map((function (param) {
                    return defineInitialLayerValue(layer, param);
                  }), List.filter((function (param) {
                          var layer$1 = layer;
                          var param$1 = param;
                          var name = param$1[0];
                          var isAssigned = function (param) {
                            return Caml_obj.caml_equal(param[1], /* :: */[
                                        "layers",
                                        /* :: */[
                                          layer$1[/* name */1],
                                          /* :: */[
                                            name,
                                            /* [] */0
                                          ]
                                        ]
                                      ]);
                          };
                          return Curry._2(Logic$LonaCompilerCore.IdentifierSet[/* exists */15], isAssigned, conditionallyAssigned);
                        }))(List.filter(filterParameters)(Curry._1(StringMap$LonaCompilerCore.bindings, param[1]))));
    };
    return /* FunctionDeclaration */Block.__(9, [{
                name: "update",
                modifiers: /* :: */[
                  /* AccessLevelModifier */Block.__(0, [/* PrivateModifier */0]),
                  /* [] */0
                ],
                parameters: /* [] */0,
                body: joinGroups(/* Empty */0, /* :: */[
                      List.concat(List.map(defineInitialLayerValues, Curry._1(Layer$LonaCompilerCore.LayerMap[/* bindings */16], assignments))),
                      /* :: */[
                        toSwiftAST(colors, rootLayer, logic),
                        /* [] */0
                      ]
                    ])
              }]);
  };
  return /* TopLevelDeclaration */Block.__(19, [{
              statements: /* :: */[
                /* ImportDeclaration */Block.__(10, ["UIKit"]),
                /* :: */[
                  /* ImportDeclaration */Block.__(10, ["Foundation"]),
                  /* :: */[
                    /* LineComment */Block.__(15, ["MARK: - " + name]),
                    /* :: */[
                      /* Empty */0,
                      /* :: */[
                        /* ClassDeclaration */Block.__(4, [{
                              name: name,
                              inherits: /* :: */[
                                /* TypeName */Block.__(0, ["UIView"]),
                                /* [] */0
                              ],
                              modifier: /* Some */[/* PublicModifier */3],
                              isFinal: /* false */0,
                              body: List.concat(/* :: */[
                                    /* :: */[
                                      /* LineComment */Block.__(15, ["MARK: Lifecycle"]),
                                      /* [] */0
                                    ],
                                    /* :: */[
                                      /* :: */[
                                        /* Empty */0,
                                        /* [] */0
                                      ],
                                      /* :: */[
                                        /* :: */[
                                          initializerDoc(/* () */0),
                                          /* [] */0
                                        ],
                                        /* :: */[
                                          /* :: */[
                                            /* Empty */0,
                                            /* [] */0
                                          ],
                                          /* :: */[
                                            /* :: */[
                                              initializerCoderDoc(/* () */0),
                                              /* [] */0
                                            ],
                                            /* :: */[
                                              /* :: */[
                                                /* LineComment */Block.__(15, ["MARK: Public"]),
                                                /* [] */0
                                              ],
                                              /* :: */[
                                                /* :: */[
                                                  /* Empty */0,
                                                  /* [] */0
                                                ],
                                                /* :: */[
                                                  List.map(parameterVariableDoc, parameters),
                                                  /* :: */[
                                                    /* :: */[
                                                      /* LineComment */Block.__(15, ["MARK: Private"]),
                                                      /* [] */0
                                                    ],
                                                    /* :: */[
                                                      /* :: */[
                                                        /* Empty */0,
                                                        /* [] */0
                                                      ],
                                                      /* :: */[
                                                        List.map(viewVariableDoc, nonRootLayers),
                                                        /* :: */[
                                                          /* :: */[
                                                            /* Empty */0,
                                                            /* [] */0
                                                          ],
                                                          /* :: */[
                                                            List.concat(Layer$LonaCompilerCore.flatmap(spacingVariableDoc, rootLayer)),
                                                            /* :: */[
                                                              /* :: */[
                                                                /* Empty */0,
                                                                /* [] */0
                                                              ],
                                                              /* :: */[
                                                                List.map((function (def) {
                                                                        var variableName = def[/* variableName */0];
                                                                        return /* VariableDeclaration */Block.__(7, [{
                                                                                    modifiers: /* :: */[
                                                                                      /* AccessLevelModifier */Block.__(0, [/* PrivateModifier */0]),
                                                                                      /* [] */0
                                                                                    ],
                                                                                    pattern: /* IdentifierPattern */Block.__(0, [{
                                                                                          identifier: variableName,
                                                                                          annotation: /* Some */[/* OptionalType */Block.__(4, [/* TypeName */Block.__(0, ["NSLayoutConstraint"])])]
                                                                                        }]),
                                                                                    init: /* None */0,
                                                                                    block: /* None */0
                                                                                  }]);
                                                                      }), constraints),
                                                                /* :: */[
                                                                  /* :: */[
                                                                    /* Empty */0,
                                                                    /* [] */0
                                                                  ],
                                                                  /* :: */[
                                                                    /* :: */[
                                                                      setUpViewsDoc(rootLayer),
                                                                      /* [] */0
                                                                    ],
                                                                    /* :: */[
                                                                      /* :: */[
                                                                        /* Empty */0,
                                                                        /* [] */0
                                                                      ],
                                                                      /* :: */[
                                                                        /* :: */[
                                                                          setUpConstraintsDoc(rootLayer),
                                                                          /* [] */0
                                                                        ],
                                                                        /* :: */[
                                                                          /* :: */[
                                                                            /* Empty */0,
                                                                            /* [] */0
                                                                          ],
                                                                          /* :: */[
                                                                            /* :: */[
                                                                              updateDoc(/* () */0),
                                                                              /* [] */0
                                                                            ],
                                                                            /* [] */0
                                                                          ]
                                                                        ]
                                                                      ]
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ]
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ])
                            }]),
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            }]);
}

var Component = /* module */[/* generate */generate];

exports.Format     = Format;
exports.Ast        = Ast;
exports.Document   = Document;
exports.Render     = Render;
exports.SwiftLogic = SwiftLogic;
exports.Color      = Color;
exports.Component  = Component;
/* prettier Not a pure module */
