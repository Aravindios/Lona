// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Json_decode = require("bs-json/src/Json_decode.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var emptyShadow = /* record */[
  /* id */"defaultShadowName",
  /* name : None */0,
  /* color : None */0,
  /* x : None */0,
  /* y : None */0,
  /* blur : None */0
];

function find(shadows, id) {
  var exit = 0;
  var shadow;
  try {
    shadow = List.find((function (t) {
            return t[/* id */0] === id;
          }), shadows);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* Some */[shadow];
  }
  
}

function parseFile(content) {
  var parsed = JSON.parse(content);
  var parseShadow = function (json) {
    return /* record */[
            /* id */Json_decode.field("id", Json_decode.string, json),
            /* name */Json_decode.optional((function (param) {
                    return Json_decode.field("name", Json_decode.string, param);
                  }), json),
            /* color */Json_decode.optional((function (param) {
                    return Json_decode.field("color", Json_decode.string, param);
                  }), json),
            /* x */Json_decode.optional((function (param) {
                    return Json_decode.field("x", Json_decode.$$float, param);
                  }), json),
            /* y */Json_decode.optional((function (param) {
                    return Json_decode.field("y", Json_decode.$$float, param);
                  }), json),
            /* blur */Json_decode.optional((function (param) {
                    return Json_decode.field("blur", Json_decode.$$float, param);
                  }), json)
          ];
  };
  var shadows = Json_decode.field("shadows", (function (param) {
          return Json_decode.list(parseShadow, param);
        }), parsed);
  var match = Json_decode.optional((function (param) {
          return Json_decode.field("defaultShadowName", Json_decode.string, param);
        }), parsed);
  var defaultShadow;
  if (match) {
    var match$1 = find(shadows, match[0]);
    defaultShadow = match$1 ? match$1[0] : emptyShadow;
  } else {
    defaultShadow = emptyShadow;
  }
  return /* record */[
          /* defaultShadow */defaultShadow,
          /* shadows */shadows
        ];
}

exports.emptyShadow = emptyShadow;
exports.find = find;
exports.parseFile = parseFile;
/* No side effect */
