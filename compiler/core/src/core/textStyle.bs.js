// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Fs                      = require("fs");
var List                    = require("bs-platform/lib/js/list.js");
var Json_decode             = require("bs-json/src/Json_decode.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function normalizeFontWeight(value) {
  if (value) {
    switch (value[0]) {
      case "bold" : 
          return /* Some */["700"];
      case "normal" : 
          return /* Some */["400"];
      default:
        return value;
    }
  } else {
    return /* None */0;
  }
}

function normalizeId(string) {
  return string.replace((/\+/g), "Plus");
}

function parseFile(filename) {
  var content = Fs.readFileSync(filename, "utf8");
  var parsed = JSON.parse(content);
  var parseTextStyle = function (json) {
    var string = Json_decode.field("id", Json_decode.string, json);
    return /* record */[
            /* id */string.replace((/\+/g), "Plus"),
            /* name */Json_decode.optional((function (param) {
                    return Json_decode.field("name", Json_decode.string, param);
                  }), json),
            /* fontName */Json_decode.optional((function (param) {
                    return Json_decode.field("fontName", Json_decode.string, param);
                  }), json),
            /* fontFamily */Json_decode.optional((function (param) {
                    return Json_decode.field("fontFamily", Json_decode.string, param);
                  }), json),
            /* fontWeight */normalizeFontWeight(Json_decode.optional((function (param) {
                        return Json_decode.field("fontWeight", Json_decode.string, param);
                      }), json)),
            /* fontSize */Json_decode.optional((function (param) {
                    return Json_decode.field("fontSize", Json_decode.$$float, param);
                  }), json),
            /* lineHeight */Json_decode.optional((function (param) {
                    return Json_decode.field("lineHeight", Json_decode.$$float, param);
                  }), json),
            /* letterSpacing */Json_decode.optional((function (param) {
                    return Json_decode.field("letterSpacing", Json_decode.$$float, param);
                  }), json),
            /* color */Json_decode.optional((function (param) {
                    return Json_decode.field("color", Json_decode.string, param);
                  }), json)
          ];
  };
  return Json_decode.field("styles", (function (param) {
                return Json_decode.list(parseTextStyle, param);
              }), parsed);
}

function find(textStyles, id) {
  var normalizedId = id.replace((/\+/g), "Plus");
  var exit = 0;
  var textStyle;
  try {
    textStyle = List.find((function (textStyle) {
            return +(textStyle[/* id */0] === normalizedId);
          }), textStyles);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* Some */[textStyle];
  }
  
}

exports.normalizeFontWeight = normalizeFontWeight;
exports.normalizeId         = normalizeId;
exports.parseFile           = parseFile;
exports.find                = find;
/* fs Not a pure module */
